A Layered Swarm Optimization Method for Fitting Battery Thermal Runaway Models to Accelerating Rate Calorimetry Data Saakaar Bhatnagara† sbhatnagar@altair.comAndrew Comerforda acomerford@altair.comZelu Xua zxu@altair.com Simone Reitanob simone.reitano@beond.netLuigi Scrimierib luigi.scrimieri@beond.netLuca Giulianob luca.giuliano@beond.net Araz Banaeizadeha araz@altair.com aAltair Engineering Inc., 640 W. California Ave, Sunnyvale, CA, USA bBeonD Srl - Corso Castelfidardo, 30A, 10129 Torino, Italy Keywords: Thermal Runaway, Accelerating Rate Calorimetry (ARC), Particle Swarm Optimiza- tion, Modeling and Simulation, Artificial Intelligence Abstract Thermal runaway in lithium-ion batteries is a critical safety concern for the battery industry due to its potential to cause uncontrolled temperature rises and subsequent fires that can engulf the battery pack and its surroundings. Modeling and simulation offer cost-effective tools for designing strategies to mitigate thermal runaway. Accurately simulating the chemical kinetics of thermal runaway — commonly represented by systems of Arrhenius-based Ordinary Differential Equations (ODEs) — requires fitting kinetic parameters to experimental calorimetry data, such as Accelerating Rate Calorimetry (ARC) measurements. However, existing fitting methods often rely on empirical assumptions and simplifications that compromise generality or require manual tuning during the fitting process. Particle Swarm Optimization (PSO) offers a promising approach for directly fitting kinetic parameters to experimental data. Yet, for systems involving large search spaces, such as those created by multiple Arrhenius ODEs, the computational cost of fitting can become prohibitive. This work introduces a divide-and-conquer approach based on PSO to fit N-equation Arrhenius ODE models to ARC data. The proposed method achieves accurate parameter fitting while maintaining low computational costs. The resulting fit is analyzed using two distinct ARC datasets, highlighting the method’s flexibility. The resulting models are further validated through simulations of 3D ARC and oven tests, showing excellent agreement with experimental data and alignment with expected trends. 1 Introduction Thermal runaway in battery packs is a significant safety concern, particularly in high-energy appli- cations such as electric vehicles (EVs). This phenomenon arises under thermal abuse conditions, triggering exothermic degradation reactions in battery components, including anode decomposition, cathode conversion, SEI decomposition, and electrolyte breakdown [1, 2]. Common causes include physical damage, internal short circuits, overcharging, or overheating due to extreme temperature ex- posure. The heat generated under these conditions can initiate a chain reaction where neighbouring cells enter a self-heating state, leading to thermal runaway. This propagation can affect an entire bat- tery module or pack, posing serious safety risks. These challenges are becoming increasingly critical as the industry transitions to higher power and energy-density cells [1, 3]. To mitigate such risks, cell and †Corresponding Author 1arXiv:2412.16367v2  [cs.CE]  24 Dec 2024pack manufacturers must implement stringent safety protocols, and simulation-driven design plays a pivotal role in optimizing battery designs, enabling efficient thermal analysis of innovative heat shield materials to evaluate their effectiveness in preventing thermal runaway propagation. Typically, thermal runaway modeling represents the exothermic decomposition reactions as a sys- tem of Arrhenius Ordinary Differential Equations (ODEs)[2, 4, 5]. The reaction rates, for each de- composition reaction, combined with the reaction enthalpy, enable the prediction of chemical heat generation under abuse conditions. For each Arrhenius ODE, the kinetic parameters and heat of re- action must be determined. A popular and widely cited model in literature is the one proposed by Hatchard et al. [4]. This model used calorimetry-derived data (from ARC and DSC) to model thermal runaway in an 18650 Lithium Cobalt Oxide (LCO) cylindrical cell, incorporating decomposition reac- tions for the anode, cathode, and SEI . The model treated the jellyroll of the cell as a single lumped temperature and showed excellent agreement with experimental data from an oven test. This model laid the foundation for subsequent studies, which have expanded the scope to cover: other cell types; 3D jelly roll regions; more complex decomposition reactions (e.g., electrolyte breakdown and short circuit events); and other cathode chemistries such as Nickel Manganese Cobalt (NMC) and Lithium Iron Phosphate (LFP)[5–9]. As an alternative to the Hatchard-based models, parameter estimation for generic Arrhenius type reaction kinetic ODEs have been proposed and successfully utilized in the literature [10–13]. Many of these models build upon the fundamental principles of the Hatchard-type model while abstracting the specific components of the reaction decomposition. This enables the development of parametrically simple models that are more closely matched to experimental data. Parameter estimation for thermal runaway models comes with significant challenges in determining the unknown reaction heat and kinetic parameters governing Arrhenius-based kinetic ODEs. This pro- cess typically relies on calorimetry data to measure chemical heat release. Accelerating Rate Calorime- try (ARC) is a widely used method for studying battery thermal runaway behavior at the single-cell level. Alternatively, other types of calorimetry data, such as Differential Scanning Calorimetry (DSC), can also be employed. In the literature, common fitting methods include linear approximations of the governing equations, genetic/population-based algorithms, machine learning techniques, or combina- tions of these methods [11, 13–17]. Linearisation methods are the most widely used, particularly for fitting ARC data. These methods involve dividing the temperature range into stages and linearising the Arrhenius kinetic ODEs within each stage. Parameters are then estimated using least-squares fitting. For example, Chen et al. [14] and Ping et al. [11] demonstrated temperature staging and linearisation approaches for ARC data fitting for a two-stage and five-stage model, respectively. Similarly, Ren et al. [15] and Wang et al. [16] combined linear fitting using the Kissinger method [18] with genetic algorithms to estimate the parameters of thermal runaway models based on DSC data. However, the approximations involved in linearisation often reduce the model’s fidelity and robustness, leading to inaccurate representation of the underlying data. Bhatnagar et al. [13] provides a detailed explana- tion of the limitations and pitfalls of linearisation. While some inaccuracies can be mitigated through extensive manual tuning, this approach at best yields a reasonable approximation of the original data. Bhatnagar et al. [13] and Koenig et al. [17] utilised Chemical Reaction Neural Networks [19] to fit Arrhenius ODE models to ARC and DSC experimental data. These networks explicitly encode kinetic reactions within their architectures and employ gradient-based optimization to directly esti- mate the equation parameters. The resulting models can be integrated over time and provide accurate predictions of thermal runaway behavior. However, this approach sometimes requires careful tuning of hyperparameters, such as the learning rate and the number of training steps, to achieve an optimal solution. Population methods, such as Particle Swarm Optimization (PSO) [20], have been widely used in the literature to solve parameter fitting problems for several battery modeling applications. Cheng [21] tested various population methods to fit the RC parameters of equivalent electric circuit (EEC) models to the voltage output of an Extended Hybrid Pulse Power Characterization (EHPPC) test, obtaining low error in predicted terminal voltage. Rahman et al. [22] used PSO to fit key parameters of a 1-D electrochemical model of a lithium-ion battery, and Tian et al. [23] applied a two-population method to fit the parameters of a pseudo-2D electrochemical model[24]. These works demonstrate the utility of population methods in solving parameter-fitting problems for battery physics models. Hence, using PSO to fit thermal runaway Arrhenius ODEs is a natural extension. PSO has several 2properties that make it well-suited for searching the parameter space of Arrhenius ODEs. Due to the stiffness of the governing ODEs, for large regions of the search space the computed jacobians of the loss function (obtained from integrating the ODEs) may be ill-conditioned. PSO does not require gradient computations, making it robust for these scenarios. Furthermore, PSO is inherently parallelizable, as the loss computation - the most expensive step of an optimization iteration for this application - is independent for each particle. Despite this perceived suitability, using population methods to search the parameter space of an N-stage Arrhenius ODE system (described in Section 2.1) in a single optimization is computationally expensive due to the curse of dimensionality. Chen et al. [25] studied the curse of dimensionality on population algorithms like PSO and Differential Evolution [26], concluding that parameter selection guidelines for population methods in low dimensional space may not scale to higher-dimensional search spaces, leading to inadequate exploration of the high-dimensional search space. Alternately, one can use a very large number of particles and/or search iterations, but it becomes prohibitively expensive to use large population sizes given that loss computation involves integrating a system of stiff ODEs. Furthermore, the Arrhenius ODE system is highly sensitive to parameter variations, requiring an ex- haustive search of local minimums to find the optimal solution. This work proposes a novel layered fitting method based on PSO to obtain accurate fits cost- efficiently for Arrhenius equation-based thermal runaway models from experimental ARC data. The method adopts a divide-and-conquer approach to address the curse of dimensionality, breaking the high-dimensional optimization problem into a series of sequential low-dimensional problems. The ap- proach is validated using a four-stage Arrhenius ODE model for two different ARC datasets, showing its flexibility. The obtained parameters are tested in 3D simulations of ARC and oven tests, demonstrating the generalizability of the models for broader thermal runaway Finite Element (FEM) simulations. 2 Methods and Models 2.1 Thermal Runaway ODE System The mathematical model for thermal runaway is based on a lumped-parameter approach, utilising a series of Arrhenius-based reaction equations. This model captures the decomposition reactions occurring during self-heating and the thermal runaway process. Specifically, the decomposition at various stages of the heating process can be expressed as follows: dci dt=fi(ci)Aie−Ea,i kbT,i=1,2...,N (1) fi(ci) =cni i(1−ci)mi, (2) where ciis the normalized reactant concentration, Aiis the frequency factor, Ea,iis the activation energy, kbis the Boltzmann constant, T is the temperature, and N refers to the number of stages in the model. miandniare reaction orders from the rate law. The reaction orders determine whether the reaction is nthorder (when mi= 0) or an auto-catalytic type i.e. the reaction increases as the product is generated ( mi>0) [27, 28]. The heat Qifrom the iihstage exothermic decomposition reaction can be calculated as ˙Qi=hidci dt, (3) where hiis the reaction enthalpy. The temperature update of the cell due to the thermal runaway can then be computed using mcellcpdT dt=NX i=1˙Qi, (4) where mcellandcprepresent the mass and specific heat of the cell respectively. A good model representing the thermal runaway process is achieved by obtaining the values of the following kinetic and reaction heat parameters, 3θi=[A, E a, h, m, n ]i,∀i=1,2..N , (5) such that the temperature and heat rate profiles (shown in Figure 1) predicted by integrating the model closely match the experimental ARC data. 2.2 Issues with Conventional Fitting Methods 2.2.1 Linearized Arrhenius Kinetics (a)  (b) Figure 1: Data from an ARC test (a) Heat rate data, with a sample division into N (=4) stages (b) Temperature evolution with time A widely used method for fitting the kinetic parameters of the Arrhenius ODE system, as described by Equation 5, involves linearizing the governing ODE system. The process begins by dividing the ARC data into stages, as shown in Figure 1a. Each stage is represented by ODE in the form of equations (1) and (3). For each stage, the ODE is fit independently for the self-heating data within a specific temperature range [ Ti−1, Ti], with example boundary temperatures, Ti, shown in Figure 1a. The linear fit equations, derived through a series of linearizing assumptions described in [14, 29], are given by lndT dt =ln[Ai(Tend i−Tstart i)]−Ea,i RT, (6) hi=ηimcp(Tend i−Tstart i). (7) where ηiis an adjustment factor for the enthalpy [14], obtained via manual tuning. While this method is straightforward, it suffers from several drawbacks. The linearization assumptions often do not hold true in practice and the re-using of certain parameters from previous studies reduces the accuracy and generalization of the fits. The pitfalls of the method have been discussed in detail by Bhatnagar et al. [13]. 2.2.2 Particle Swarm Optimization To address the limitations highlighted in the previous section, a fitting method that can fit the gov- erning ODEs in their original form (i.e. without linearisation) is sought. One effective approach for achieving this is a population-based optimization method such as Particle Swarm Optimization (PSO) [20]. PSO directly searches for the optimal parameters of the ODE system without relying on lin- earization assumptions. It is an iterative, zero-order algorithm that employs a population of particles to explore the search space, with each particle updating its position andvelocity based on the objective function. In this work, the optimization problem is framed as 4min uf(u), (8) umin j≤uj≤umax j j= 1, .., P, (9) where f:RP7→Ris the objective function, uis the parameter vector, and P is the dimensionality of the search space. In the most general case, P=5N, where N is the number of stages. Every component of the search space is bounded by search limits, given by [ umin j, umax j],∀j= 1, ..., P . During iterative updates of the population, the position ( ui) and velocity ( vi) of the ithparticle are updated using the following equations: ui=ui+vi, (10) vi=wvi+c1r1(ui best−ui) +c2r2(ubest−ui), (11) where ui bestrepresents the personal best position visited by a particle and ubestis the global best position visited by any particle of the swarm. The parameters r1,r2are usually randomly chosen in each iteration between 0 and 1, while c1,c2, and ware predetermined iteration-dependent values. The initial and final values of these can be tuned to make the swarm more explorative (i.e explore regions of the permissible search space) or more exploitative (i.e identify the best minimizer within a local region) at any given iteration. In this work, the value of hiis approximated using Equation 7, with ηibeing fit for each stage. The search space then takes the form Θall=N[ i=1θi=N[ i=1[A, E a, η, m, n ]i, (12) with Θ allrepresenting the union of the sets of parameters for each stage ODE. The loss function takes the form: Loss =λ1X t dT dt data−dT dt predicted!2 +λ2X t(Tdata−Tpredicted )2, (13) where λ1andλ2represent weighting coefficients for the loss terms, anddT dtand T represent the heat rate and temperature respectively. The search space limits for each parameter are described in Table 1. Parameter Lower Limit Upper Limit A 1E8 1E25 Ea 1E-19 3.5E-19 η 0.5 1.7 m 0 8 n 0 8 Table 1: Search ranges for the Arrhenius ODE fitting problem In this work, each optimization using PSO uses 1000 particles with 50 iterations in a single search. Reflective boundary conditions are applied at the search space limits in order to keep the particles within the defined search space. 2.3 Layered Optimization Fitting Algorithm As outlined above, both the linear fitting and brute-force PSO encounter difficulties when fitting the parameters of Arrhenius ODE systems (Equation 12). To address these difficulties, this work introduces a layered optimization algorithm based on PSO. The algorithm is designed to fit N-stage 5(a) Figure 2: (a) Visual depiction of the layered optimization algorithm. Each layer is shown by the dark blue arrow and an integer nand represents an optimization problem solved using PSO. The red Roman numeral indicates the stage fit in the nthlayer, and green Roman numerals depict previously fit stages used in the nthlayer. The heat contribution of each stage is summed in a given layer and compared to experimental data. Arrhenius ODEs to ARC data in a computationally efficient manner. In particular, the staging process used for the linear fitting method is combined with PSO to decompose a high-dimensional search into N low-dimensional searches, leading to a much more manageable problem. Figure 2 illustrates the layered fitting in visual form. Each layer is depicted by a dark blue arrow and is indexed by an integer n. Similar to the linear fit, the heat rate plot is divided into N stages, with each stage defined by the start and end temperature. Each stage is assigned an ODE of the form of Equation 1. In the nthlayer, only the parameters corresponding to stage n(depicted by red Roman numerals in Figure 2) are fitted using PSO, while the parameters of previously fit stages (depicted by green Roman numerals in Figure 2) are kept constant. The heat rate contribution for each stage m= 1,2, .., n is computed by integrating its corresponding ODE in the range [ Tstart, Tn] and summed to compute the total heat rate and temperature evolution over time. These outputs are compared to the raw data to compute the loss (Equation 13). Algorithm 1 outlines the pseudocode for the loss calculation of a single particle in a specific optimization layer nlayer and search iteration. The algorithm breaks down the optimization problem of maximum dimensionality 5N to N optimization problems of maximum dimensionality 5, as the fitting space for a single stage (Equation 5) has five parameters. When fitting stage N (where N is the number of stages), the heat contribution of the last stage is not added to the overall heat rate until the temperature TN−1is reached, i.e, ηN= 0 if T < T N−1. This is a modeling assumption aimed at capturing the effects of sudden, large heat release. Sun et al. [29] proposed a similar model which used a fixed, pre-computed term as the heat released during the last stage, attributing the source to extensive internal short-circuiting. Wang et al. [16] and Feng et al. [12] used a step-function for the value of the frequency factor ( Ai) of the anode, with the discontinuity temperature matching the separator collapse temperature as reported by Feng et al. [30]. 2.4 Four stage thermal runaway model The four-stage thermal runaway model takes the form shown in equations (14)-(19) below: dc1 dt=c1A1e(−Ea,1 RT), (14) 6Algorithm 1 Layered Optimization Loss Computation Pseudocode for a Given Particle Require: nlayer, Tstart,T1,2,..nlayer, dT dt data, Tdata,Θ1,...,ilayer−1,θparticle dT dt predicted= 0 foristage = 1 to nlayerdo ifistage < nlayerthen θ=Θ1,...,ilayer−1[istage]{Use parameters fit in previous layer } else θ=θparticle {Use parameters currently being optimized by PSO in layer nlayer} end if ˙Qistage(t) =hi(θ)dci dt(t), ci(t) =RTistage Tstartdci dt(θ, T)dT{Integrate ODE in [ Tstart, Tistage]}  dT dt predicted(t)+ =1 mcellcp˙Qistage(t) end for Tpredicted (t) =Rtend tstart dT dt predicted(t)dt{Integrate for Temperature History } Loss =λ1P t dT dt data− dT dt predicted2 +λ2P t(Tdata−Tpredicted )2 return Loss dc2 dt=c2A2e(−Ea,2 RT), (15) dc3 dt=cn3 3(1−c3)m3A3e(−Ea,3 RT), (16) dc4 dt=cn4 4(1−c4)m4A4e(−Ea,4 RT), (17) mcpdT dt=4X i=1hidci dt, (18) hi=ηimcp(Tend i−Tstart i). (19) The first two stages are modeled as first-order ( n= 1, m= 0) and the third and fourth stages approximated as auto-catalytic type. This simplification reduces the cost of fitting and generalizes the model equations used in [7, 11, 14], while retaining some previously used dynamics for individual stages that were found to work well. 2.5 3D Thermal Runaway Simulations After fitting was done in 0D, 3D simulations were performed in the multi-purpose CFD software Altair®AcuSolve®using the fitted parameters. The reader is referred to Section A.1 for more details on the 3D cell model. To model thermal runaway in a computationally efficient manner, a dual time- marching algorithm was utilized. In particular, the system of Arrhenius equations was adaptively controlled using a sub-stepping algorithm within the primary time-marching scheme of the Energy equation. During the sub-stepping routine, the 0D Arrhenius ODE model was solved, and the nodal temperature values were updated. The method is equivalent to adding an additional source term STR to the energy equation e.g. ρcp∂T ∂t=∇ ·(κ∇T) +STR, (20) where is ρthe density, cpis the heat capacity, κis the thermal conductivity, and the source term STRis given by 7STR=NX i=1hidci dt, (21) where hirepresents the enthalpy of different cell components. STRis active only within the jellyroll of the cell and is modeled using the four-stage thermal runaway model. In the ARC test, the cell undergoes adiabatic self-heating and no ambient temperature is required. For the oven test, the temperature reference is a single value representing the oven temperature. 3 Results and Discussion The layered optimization fitting process is demonstrated on two datasets to highlight the method’s flexibility. Both datasets were for a Molicel 21700 P45B in an EV-ARC calorimeter, see Bhatnagar et al. [13] for full details. In the first test, the cell is placed in a holder and vented gases are allowed to be released; this test will be referred to as open hereafter. In the second test, the cell is enclosed in a sealed canister within the calorimeter chamber, all gases are contained within the canister; this test will be referred to as closed hereafter. These two tests represent a range of real-world thermal runaway scenarios, such as vented and sealed battery pack enclosures. Due to the sealed nature of the closed test, the temperatures recorded during thermal runaway were significantly higher. The experiments focus on the four-stage model introduced in Section 2.4. In each case, the obtained model is fit to the experimental ARC data and compared to the experimental results to evaluate the quality of the fit. The model’s generalizability is demonstrated by conducting 3D ARC and oven test simulations of the cylindrical cell. 3.1 Open Test Table 2 details the values of the temperatures at which the stages are divided, corresponding to Figure (1a). Note that these temperatures are empirical assumptions (as in the linearized fitting), and the values of these temperatures affect the fitting dynamics and enthalpies of the model. However, by fitting θi,∀i= 1, .., N , the proposed layered optimization algorithm reduces the dependence of the resulting model on these initially chosen temperature values, increasing the generalization capability of the model and resulting in significant improvement over the linear fitting, where θihas to be manually tuned. Figure 3 shows the results of the layered optimization fitting on the data from the open test. The predicted heat rate plot (Figure 3a) shows a good match to experimental data, with the model predict- ing the dynamics of the thermal runaway well throughout the process. The initial slow temperature rise and the transition to faster self-heating are both well-captured. As per the modeling assumption, stage 4 does not contribute to the total heat until reaching the temperature T3(shown in Table 2), after which stage 4 becomes the dominant source of heat release during the thermal runaway process. Figure 3b shows the reactant concentration for each stage versus time. The reactant consumption for stages 1 and 2 can be seen as relatively gradual, consistent with the observation of slow energy release during the early parts of self-heating. The reactant consumption for stage 3 is rapid, causing the sudden increase in heat rate. The Stage 4 reactant is consumed slowly until reaching the temperature T3, post which it is rapidly consumed. The obtained parameters, fit in 0D, are then used to simulate an ARC test in 3D. Figure 3c compares the predicted mean cell temperature during 3D simulation with the experimental data. Due to differences in the thermal dynamics of the cell between the 0D and 3D models (e.g. anisotropic transient conduction), the predicted thermal runaway time - assumed as the time when the temperature crosses 180oC- was approximately two minutes earlier than than the experimental time. Correcting this required a small adjustment (a 1.5 % increase) in the value of the parameter Ea,2. After this adjustment, the maximum temperature and the time of thermal runaway is predicted accurately in the 3D simulation using the calibrated model. The difference in temperature prediction post thermal runaway is because cooling is not included in the thermal runaway simulation. This can be addressed by switching from an adiabatic environment to one that includes cooling post thermal runaway. Finally, oven tests are simulated at several temperatures using the obtained parameters. Figure 3d shows the expected trend of thermal runaway for different oven temperatures. If the oven temperature is too 8low ( T∞= 140oC), the cell does not go into thermal runaway. However, as the oven temperature increases, thermal runaway is observed, with a shorter time to thermal runaway and higher maximum temperature. Tstart T1T2T3 123 161 191 221 Table 2: Staging temperatures for the open test, all values inoC (a)  (b) (c)  (d) Figure 3: Results from fitting data from the open test (a) Heat rate fit depicting each individual stage (b) Reactant concentrations (c) 3D simulation of self-heating and temperature comparison with experiment (d) 3D oven test simulations at several temperatures 3.2 Closed Test Table 4 details the temperatures of stage division for the closed test. Figure 4 shows the results of the layered optimization fitting for the data obtained from the closed test. The predicted heat rate plot (Figure 4a) shows good agreement with the experimental data. The initial slow temperature rise and the subsequent transition to rapid heat release are both well captured. Compared to the open test, this dataset has a higher self-heating rate and maximum temperature during thermal runaway. The layered fitting captures these differences effectively, yielding an excellent predictive model. Figure 4b shows the stage-wise normalized reactant concentration consumption, showing a similar pattern to Figure 3b. The obtained parameters are shown in Table 5. The obtained parameters were subsequently included in a 3D ARC simulation, as previously de- scribed. As with the open test, due to differences in the thermal behaviour of the 0D and 3D models, 9Stage No. I.C (ci,0)Ai(s−)Ea,i(J) hi(J) mini Stage 1 1.0 3.23E15 2.495E-19 2894 0 1 Stage 2 1.0 3.11E21 3.55E-19* 2285 0 1 Stage 3 0.04 2.59E24 3.50E-19 1345 3.00 3.14 Stage 4 0.04 1.00E8 1.56E-190 (T < T 3) 18224 ( T≥T3)0 3.14 Table 3: Obtained parameters from the open test. The * indicates the parameter adjusted to account for 3D effects when running ARC and oven test simulations. the predicted thermal runaway time in the 3D simulation occurred approximately 4 minutes early. By increasing the parameter Ea,2by 0.75%, the 3D simulation shows a good agreement with the experi- mental data, as shown in Figure 4c, predicting accurately the thermal runaway time and the maximum temperature. Finally, oven tests were undertaken for several temperatures, as shown in Figure 4d. The results demonstrate the expected trend: higher oven temperatures lead to quicker thermal runaway and higher maximum temperatures. It may be noted that the maximum temperatures achieved in the oven tests from the closed test are much higher than those from the open test for the same oven temperatures. These observations align with the expected dynamics of the closed test, specifically larger self-heating rates and higher temperatures. As observed in the previous section, if the oven temperature is too low, the model predicts that thermal runaway does not occur. Tstart T1T2T3 123 151 201 221 Table 4: Staging temperatures for the closed test, all values inoC 3.3 Discussion The previous sections demonstrated the flexibility and accuracy of the layered PSO method in fitting N-stage Arrhenius ODE models to ARC data. The layered optimization technique can capture the differing dynamics of different ARC datasets efficiently and accurately, and the obtained models can generalize well to realistic 3D simulations of thermal runaway. Moreover, the method is agnostic to cell stoichiometry and geometry, and can generalize to an arbitrary number of stages. The proposed method allows users to fit models to ARC data with greater generality than pre- viously possible, avoiding the need to reuse or adapt parameters from other literature [12, 31, 32]. Furthermore, the method allows straight-forward fitting of Arrhenius kinetics to the self-heating and thermal runaway stages of an ARC test, addressing limitations of other methods, such as directly computing the self-heating rate from the ARC data or using cumulative enthalpy methods. These alternative methods often do not generalize well outside the adiabatic environment of an ARC test simulation. Some common issues include inaccurate prediction of the maximum temperature when the heat input is increased and and difficulties with propagation. Recently, the use of Chemical Reaction Stage No. I.C (ci,0)Ai(s−) Ea,i(J) hi(J) mini Stage 1 1.0 1.261E17 2.697E-19 2133 0 1 Stage 2 1.0 3.96E21 3.525E-19* 3809 0 1 Stage 3 0.04 1.00E25 3.500E-19 1448 3.40 4.23 Stage 4 0.04 1.00E8 1.556E-190 (T < T 3) 43994 ( T≥T3)0 6.56 Table 5: Obtained parameters for the closed test. The * indicates the parameter adjusted to account for 3D effects when running ARC and oven test simulations. 10(a)  (b) (c)  (d) Figure 4: Results from fitting the data from the closed test (a) Heat rate fit depicting each individual stage (b) Reactant concentrations (c) 3D simulation of self-heating and temperature comparison with experimental data (d) 3D oven test simulations at several temperatures Neural Networks (CRNNs) [13] has also been shown to fit Arrhenius kinetics without making limiting assumptions on the model. However, a drawback of the CRNN method is that it requires a good initial condition for the parameters to be fit. This can be partly achieved using the linearization method, but may require further tuning of the initial condition in some cases to achieve a good fit. The layered PSO method searches the entire parameter space while iterating, and does not require a good initial condition. Several recent studies have explored using machine learning models to predict the onset of thermal runaway without using Arrhenius ODE models. Kim et al. [33] used Physics Informed Neural Net- works (PINNs)[34] to predict thermal runaway in lithium-ion batteries, successfully predicting thermal runaway for cases where labelled data was unavailable. Jeong et al. [35] used physics-informed Deep- ONets [36] to predict thermal runaway, embedding physical principles directly into the loss function. Goswami et al. [37] used a coupled Graph Neural Network (GNN) and Long Short-Term Memory (LSTM) network to predict thermal runaway, leveraging virtual sensor data to predict thermal run- away during battery operation. However, these approaches rely on using data from simulations (e.g. finite element based simulations) to train the models, which still require an accurate model to fit the thermal runaway dynamics of the cell under investigation. This work hence enables and improves a broad range of predictive modeling approaches for thermal runaway, enabling safer battery pack designs and the creation of early warning systems for battery pack fire occurrence. 4 Conclusion This work proposes a novel layered optimization fitting algorithm that incorporates a divide-and- conquer approach to fitting N-stage Arrhenius ODE models to Accelerating Rate Calorimetry (ARC) 11data. The proposed algorithm ensures the accuracy and generalizability of the fit models by eliminating model simplifications usually made to enable the fitting of the ODE system, while tackling the curse of dimensionality observed while optimizing in high-dimensional parameter spaces using population- based algorithms, by breaking the problem into several low dimensional optimization problems. The proposed algorithm is used to fit four-stage models and is found to return models that accurately reproduce the experimental data. The resultant models are simulated in 3D ARC and oven tests, the results of which show good agreement with experimental data and expected trends. The algorithm is demonstrated on two different ARC datasets, showing the flexibility of the proposed method. The proposed algorithm can also extend to several cell types, stoichiometries and an arbitrary number of stages. This work represents a promising step forward in using simulation tools to design safe battery-powered systems efficiently and accurately. 5 CRediT Authorship Statement Saakaar Bhatnagar : Conceptualization, Formal Analysis, Investigation, Methodology, Software, Visualization, Writing- Original Draft Andrew Comerford : Conceptualization, Software, Formal Analysis, Project Administration, Writing- Original Draft Zelu Xu : Conceptualization, Software, Formal Analysis, Validation, Writing- Review and Editing Simone Reitano : Data Curation, Investigation, Resources, Writing- Review and Editing Luigi Scrimieri : Data Curation, Investigation, Resources, Writing- Review and Editing Luca Giuliano : Data Curation, Validation, Writing- Review and Editing Araz Banaeizadeh : Project Administration, Supervision, Writing- Review and Editing 6 Funding Sources This research received no specific grant from funding agencies in the public, commercial, or not-for- profit sectors. References [1] Xuning Feng, Minggao Ouyang, Xiang Liu, Languang Lu, Yong Xia, and Xiangming He. Thermal runaway mechanism of lithium ion battery for electric vehicles: A review. Energy storage materials , 10:246–267, 2018. [2] R Spotnitz and J Franklin. Abuse behavior of high-power, lithium-ion cells. Journal of power sources , 113(1):81–100, 2003. [3] Andrey W Golubkov, David Fuchs, Julian Wagner, Helmar Wiltsche, Christoph Stangl, Gisela Fauler, Gernot Voitic, Alexander Thaler, and Viktor Hacker. Thermal-runaway experiments on consumer li-ion batteries with metal-oxide and olivin-type cathodes. Rsc Advances , 4(7):3633– 3642, 2014. [4] TD Hatchard, DD MacNeil, A Basu, and JR Dahn. Thermal model of cylindrical and prismatic lithium-ion cells. Journal of The Electrochemical Society , 148(7):A755, 2001. [5] Gi-Heon Kim, Ahmad Pesaran, and Robert Spotnitz. A three-dimensional thermal abuse model for lithium-ion cells. Journal of power sources , 170(2):476–489, 2007. [6] Peng Peng and Fangming Jiang. Thermal safety of lithium-ion batteries with various cathode materials: A numerical study. International Journal of Heat and Mass Transfer , 103:1008–1016, 2016. [7] Paul T Coman, Eric C Darcy, Christian T Veje, and Ralph E White. Modelling li-ion cell thermal runaway triggered by an internal short circuit device using an efficiency factor and arrhenius formulations. Journal of The Electrochemical Society , 164(4):A587, 2017. 12[8] Peter J Bugryniec, Jonathan N Davidson, and Solomon F Brown. Computational modelling of thermal runaway propagation potential in lithium iron phosphate battery packs. Energy Reports , 6:189–197, 2020. [9] Depeng Kong, Gongquan Wang, Ping Ping, and Jenifer Wen. Numerical investigation of thermal runaway behavior of lithium-ion batteries with different battery materials and heating conditions. Applied Thermal Engineering , 189:116661, 2021. [10] Ashish V Shelkea, Jonathan EH Buston, Jason Gill, Daniel Howard, Rhiannon CE Williams, Elliott Read, Ahmed Abaza, Brian Cooper, Philp Richards, and Jennifer X Wen. Combined numerical and experimental studies of 21700 lithium-ion battery thermal runaway induced by different thermal abuse. International Journal of Heat and Mass Transfer , 194:123099, 2022. [11] Ping Ping, Qingsong Wang, Youngmann Chung, and Jennifer Wen. Modelling electro-thermal response of lithium-ion batteries from normal to abuse conditions. Applied energy , 205:1327– 1344, 2017. [12] Xuning Feng, Xiangming He, Minggao Ouyang, Li Wang, Languang Lu, Dongsheng Ren, and Shriram Santhanagopalan. A coupled electrochemical-thermal failure model for predicting the thermal runaway behavior of lithium-ion batteries. Journal of The Electrochemical Society , 165 (16):A3748–A3765, 2018. [13] Saakaar Bhatnagar, Andrew Comerford, Zelu Xu, Davide Berti Polato, Araz Banaeizadeh, and Alessandro Ferraris. Chemical reaction neural networks for fitting accelerating rate calorimetry data. Journal of Power Sources , 628:235834, 2025. [14] Haodong Chen, Jonathan EH Buston, Jason Gill, Daniel Howard, Rhiannon CE Williams, Elliott Read, Ahmed Abaza, Brian Cooper, and Jennifer X Wen. A simplified mathematical model for heating-induced thermal runaway of lithium-ion batteries. Journal of The Electrochemical Society , 168(1):010502, 2021. [15] Dongsheng Ren, Xiang Liu, Xuning Feng, Languang Lu, Minggao Ouyang, Jianqiu Li, and Xiang- ming He. Model-based thermal runaway prediction of lithium-ion batteries from kinetics analysis of cell components. Applied energy , 228:633–644, 2018. [16] Yu Wang, Dongsheng Ren, Xuning Feng, Li Wang, and Minggao Ouyang. Thermal kinetics comparison of delithiated li [nixcoymn1-xy] o2 cathodes. Journal of Power Sources , 514:230582, 2021. [17] Benjamin C Koenig, Peng Zhao, and Sili Deng. Accommodating physical reaction schemes in dsc cathode thermal stability analysis using chemical reaction neural networks. Journal of Power Sources , 581:233443, 2023. [18] Homer E Kissinger et al. Variation of peak temperature with heating rate in differential thermal analysis. Journal of research of the National Bureau of Standards , 57(4):217–221, 1956. [19] Weiqi Ji and Sili Deng. Autonomous discovery of unknown reaction pathways from data by chemical reaction neural network. The Journal of Physical Chemistry A , 125(4):1082–1092, 2021. [20] James Kennedy and Russell Eberhart. Particle swarm optimization. In Proceedings of ICNN’95- international conference on neural networks , volume 4, pages 1942–1948. ieee, 1995. [21] Yu-Shan Cheng. Identification of parameters for equivalent circuit model of li-ion battery cell with population based optimization algorithms. Ain Shams Engineering Journal , 15(3):102481, 2024. [22] Md Ashiqur Rahman, Sohel Anwar, and Afshin Izadian. Electrochemical model parameter iden- tification of a lithium-ion battery using particle swarm optimization method. Journal of Power Sources , 307:86–97, 2016. [23] Aina Tian, Kailang Dong, Xiao-Guang Yang, Yuqin Wang, Luyao He, Yang Gao, and Jiuchun Jiang. Physics-based parameter identification of an electrochemical model for lithium-ion batteries with two-population optimization method. Applied Energy , 378:124748, 2025. 13[24] Marc Doyle, Thomas F Fuller, and John Newman. Modeling of galvanostatic charge and discharge of the lithium/polymer/insertion cell. Journal of the Electrochemical society , 140(6):1526, 1993. [25] Stephen Chen, James Montgomery, and Antonio Boluf´ e-R¨ ohler. Measuring the curse of dimension- ality and its effects on particle swarm optimization and differential evolution. Applied Intelligence , 42:514–526, 2015. [26] K Price. Differential Evolution: a Practical Approach to Global Optimization . Springer Science & Business Media, 2006. [27] Michael E Brown. The prout-tompkins rate equation in solid-state kinetics. Thermochimica acta , 300(1-2):93–106, 1997. [28] Mathilde Grandjacques, Pierre Kuntz, Philippe Aza¨ ıs, Sylvie Genies, and Olivier Raccurt. Ther- mal runaway modelling of li-ion cells at various states of ageing with a semi-empirical model based on a kinetic equation. Batteries , 7(4):68, 2021. [29] Tao Sun, Luyan Wang, Dongsheng Ren, Zhihe Shi, Jie Chen, Yuejiu Zheng, Xuning Feng, Xuebing Han, Languang Lu, Li Wang, et al. Thermal runaway characteristics and modeling of lifepo4 power battery for electric vehicles. Automotive Innovation , 6(3):414–424, 2023. [30] Xuning Feng, Mou Fang, Xiangming He, Minggao Ouyang, Languang Lu, Hao Wang, and Mingx- uan Zhang. Thermal runaway features of large format prismatic lithium ion battery using extended volume accelerating rate calorimetry. Journal of power sources , 255:294–301, 2014. [31] Xuning Feng, Languang Lu, Minggao Ouyang, Jiangqiu Li, and Xiangming He. A 3d thermal runaway propagation model for a large format lithium ion battery module. Energy , 115:194–208, 2016. [32] Jason K Ostanek, Weisi Li, Partha P Mukherjee, KR Crompton, and Christopher Hacker. Simu- lating onset and evolution of thermal runaway in li-ion cells using a coupled thermal and venting model. Applied energy , 268:114972, 2020. [33] Sung Wook Kim, Eunji Kwak, Jun-Hyeong Kim, Ki-Yong Oh, and Seungchul Lee. Modeling and prediction of lithium-ion battery thermal runaway via multiphysics-informed neural network. Journal of Energy Storage , 60:106654, 2023. [34] Maziar Raissi, Paris Perdikaris, and George E Karniadakis. Physics-informed neural networks: A deep learning framework for solving forward and inverse problems involving nonlinear partial differential equations. Journal of Computational physics , 378:686–707, 2019. [35] Jinho Jeong, Eunji Kwak, Jun-hyeong Kim, and Ki-Yong Oh. Prediction of thermal runaway for a lithium-ion battery through multiphysics-informed deeponet with virtual data. eTransportation , 21:100337, 2024. [36] Somdatta Goswami, Aniruddha Bora, Yue Yu, and George Em Karniadakis. Physics-informed deep neural operator networks. In Machine Learning in Modeling and Simulation: Methods and Applications , pages 219–254. Springer, 2023. [37] Basab Ranjan Das Goswami, Yasaman Abdisobbouhi, Hui Du, Farzad Mashayek, Todd A Kingston, and Vitaliy Yurkiv. Advancing battery safety: Integrating multiphysics and machine learning for thermal runaway prediction in lithium-ion battery module. Journal of Power Sources , 614:235015, 2024. A Appendix A.1 Cell properties for 3D simulation This section contains additional information about the 3D ARC and oven test simulations. The governing Equation (20) is discretized using a Galerkin least squares stabilized finite element method. 14Component Density ( kg/m3) Specific Heat ( J/kgK ) Conductivity ( W/mK ) Jelly Roll 161 191 ( kr, kθ, kh)=(0.3,28,28) Steel Can 7917 460 14 Tabs 2770 986 175 Table 6: Properties of cell components simulated The battery geometry consisted of three main components: the jellyroll; the aluminium positive and negative tabs/terminals; and a steel can. A summary of the material properties for each of these components is provided in Table 6. The jellyroll, an effective material representation of the true wound geometry, has cylindrical anisotropic properties for thermal conductivity; the through-plane conductivity is significantly lower than in-plane conductivity. Figure 5a shows the 3D model of the cell used. (a) Figure 5: (a) Geometry of the cell under consideration 15