Forward and Inverse Simulation of Pseudo-Two-Dimensional Model of Lithium-Ion Batteries Using Neural Networks Myeong-Su Leea,∗, Jaemin Oha,∗, Dong-Chan Leeb, KangWook Leeb, Sooncheol Parkb, Youngjoon Honga,∗∗ aKorea Advanced Institute of Science and Technology, 291 Daehak-ro, Yuseong-Gu, 34141, Daejeon, Republic of Korea bPerformance Concept Technology Research Lab, Hyundai Motor Company 150 Hyundaiyeonguso-Ro, Namyang-Eup, Hwaseong-Si, 18280, Gyeonggi, Republic of Korea Abstract In this work, we address the challenges posed by the high nonlinearity of the Butler-Volmer (BV) equation in forward and inverse simulations of the pseudo-two-dimensional (P2D) model using the physics-informed neural network (PINN) framework. The BV equation presents significant challenges for PINNs, primarily due to the hyperbolic sine term, which renders the Hessian of the PINN loss function highly ill-conditioned. To address this issue, we introduce a bypassing term that improves numerical stability by substantially reducing the condition number of the Hessian matrix. Furthermore, the small magnitude of the ionic flux joften leads to a common failure mode where PINNs converge to incorrect solutions. We demonstrate that incorporating a secondary conservation law for the solid-phase potential ψeffectively prevents such convergence issues and ensures solution accuracy. The proposed methods prove effective for solving both forward and inverse problems involving the BV equation. Specifically, we achieve precise parameter estimation in inverse scenarios and reliable solution predictions for forward simulations. Keywords: Physics-informed neural networks, Lithium-ion battery, Pseudo-two-dimensional model, forward and inverse solver 1. Introduction Lithium-ion batteries have become integral to modern technology, powering a wide range of devices from laptops and mobile phones to electric vehicles [1]. The 2019 Nobel Prize in Chem- istry, awarded to the pioneers of lithium-ion battery technology, highlights its transformative impact on modern life. However, despite their widespread adoption, lithium-ion batteries face inherent challenges, including finite lifecycles, performance degradation, and safety risks such as thermal runaway and explosions [2, 3]. These limitations, alongside environmental and economic concerns, underscore the critical need for precise monitoring and effective management of bat- tery systems. Ensuring reliability and safety while maximizing performance and lifespan is not only vital for current applications but also for advancing the next generation of energy storage technologies [4]. ∗Equal contribution ∗∗Corresponding author Email addresses: msl3573@kaist.ac.kr (Myeong-Su Lee ), jaeminoh@kaist.ac.kr (Jaemin Oh ), hongyj@kaist.ac.kr (Youngjoon Hong ) URL: sites.google.com/view/mslee2 (Myeong-Su Lee ), jaeminoh.github.io (Jaemin Oh ), youngjoonhong.com (Youngjoon Hong ) Preprint submitted to Elsevier December 19, 2024arXiv:2412.13200v1  [physics.comp-ph]  2 Dec 2024Effective battery management relies heavily on the ability to accurately predict and under- stand changes in the battery state under varying operating and environmental conditions [5, 6]. In this context, physics-based model simulations have emerged as a powerful tool, enabling accurate battery state estimation without the need for extensive experimental data. These simulations play a pivotal role in solving both forward problems, such as predicting battery performance, and inverse problems, such as identifying key material properties and reaction kinetics from limited data [7, 8]. Moreover, the increasing emphasis on digital twin technologies highlights the central role of physics-based models in developing intelligent and efficient battery management systems. By enabling a deeper understanding of battery behavior, these models support not only safer and more sustainable energy storage solutions but also the optimization of battery design and func- tionality [9]. The pseudo-two-dimensional (P2D) model, also known as the Doyle-Fuller-Newman model, has been widely used in lithium-ion battery studies due to its ability to accurately cap- ture the essential electrochemical processes, such as transport and reaction kinetics [10]. The P2D model divides the battery into three distinct regions: the negative electrode, the separator, and the positive electrode. It accounts for the transport of lithium ions through the electrolyte, the diffusion of lithium within solid particles in the electrodes, and the electrochemical reactions that occur at the interfaces between the electrolyte and solid particles. The P2D model consists of coupled partial differential equations (PDEs) to describe the concentration of lithium ions and the electric potentials across these regions, along with the Butler-Volmer equation to model the kinetics of the electrochemical reactions. Numerous studies have validated the P2D model’s accuracy, showing good agreement with experimental data and highlighting its effectiveness in predicting the dynamic behavior of lithium-ion batteries [11, 12]. Numerical experiments play a crucial role in understanding and optimizing complex systems, including lithium-ion battery models. Over the years, numerous efforts have been made to de- velop and refine classical numerical methods for solving PDEs, such as finite element and finite difference methods. These methods have proven effective in solving the P2D model, providing accurate results under various conditions [13, 14, 15]. The availability of software packages in MATLAB [16], Python [17], and Julia [18] has further democratized the use of these methods, making them accessible to researchers and engineers across disciplines. However, the complex- ity of the underlying equations presents implementation challenges, and these classical methods often struggle with solving inverse problems due to high computational demands and sensitivity to noise. Recently, scientific machine learning (SciML) has emerged as a potential alternative method for solving both forward and inverse problems of PDEs. Especially, physics-informed neural networks (PINNs) incorporate governing physical laws directly into the loss function used for neural network learning, making them particularly well-suited for problems with limited data [19]. PINNs have shown promising results across various scientific domains [20, 21, 22]. These applications highlight PINNs’ ability to handle complex, multi-scale, and multi-physics problems by leveraging the underlying physics as a constraint during the optimization process. Given this success in other fields, there has been increasing interest in applying SciML techniques, partic- ularly PINNs, to battery simulations. In the context of battery simulations, SciML techniques hold significant potential for capturing hidden physical phenomena, such as transport and re- action dynamics, while also enabling the estimation of critical parameters that are difficult to measure directly. Despite the notable progress in applying PINNs to various fields of physics and engineering, their applicability across diverse domains still remains underexplored, highlighting the need for further extensive research. In particular, vanilla PINNs have shown significant limitations in addressing highly non-linear phenomena, complex boundary conditions, and stiff problems. These challenges also arise in battery simulations [23]. Specifically, the vanilla PINN approach struggles to effectively solve the P2D model due to the highly nonlinear flux term, known as the Butler- Volmer (BV) equation, which describes electrochemical reactions in batteries, as well as the 2model’s multi-scale nature. To address these challenges, several studies have proposed modified approaches. Xue et al. [24] considered the single particle model (SPM), a simplified version of the P2D model, instead of directly solving the full P2D model, to reduce computational complexity and instability. Hassanaly et al. [25] proposed a two-step training strategy: first fitting the neural network to the single particle model (SPM), and then using the learned parameters as initial values for fitting the P2D model with a linearized BV equation. For the nonlinear BV equation, they suggested an additional division step to handle gradient exploding problems. Besides, Zubov et al. [26] studied a simplified P2D model using PINNs to test their software NeuralPDE.jl . Chen et al. [27] simulated redox flow batteries with PINNs, formulating a model with 6 governing equations and 24 boundary conditions. In this work, we address the specific challenges posed by the BV equation in P2D model simulations using PINNs. By designing and employing simplified paradigm models that replicate the inherent complexities of the BV equation, we systematically analyzed and identified critical issues that arise in battery simulations. Based on these insights, we developed novel strategies to overcome these challenges, enabling the direct solution of the full P2D model with the fully nonlinear BV equation in a single step, without relying on commonly used simplifications such as the SPM or linearized BV equations. The proposed strategies include the following. First, we in- troduce a bypassing term, which employs a neural network to approximate the stiffest component of the BV equation. This reduces the Hessian spectrum of the PINN loss, significantly improving the conditioning of the optimization problem and stabilizing the training process. Second, we augment the PINN loss function with a secondary conservation law for the solid-phase potential, ensuring that the predicted solution faithfully captures the nonlinear dynamics of the system and avoids convergence to incorrect solutions. Using these strategies, we achieve accurate simulation results. This demonstrates the efficacy of our approach in addressing the computational chal- lenges associated with nonlinear battery models. Furthermore, we demonstrate the effectiveness of the proposed PINN framework in addressing inverse problems related to lithium-ion battery models, specifically the estimation of critical geometric parameters such as the total battery length and the length ratio of battery sections. Inverse simulations of this kind are notoriously challenging for classical numerical methods due to high computational costs and sensitivity to noise. By leveraging the strengths of the PINN framework and building on our robust solution to the forward problem, we successfully estimate these parameters directly within the nonlinear P2D model framework. Our method requires minimal modifications to incorporate observational data and avoids the need for simplifying assumptions or additional numerical approximations. These results highlight the capability of our approach to tackle complex inverse problems with improved reliability and computational efficiency. 2. Preliminary We start with a brief overview of the P2D model, followed by an introduction to the basic concepts of PINNs. 2.1. Pseudo-Two-Dimensional Model Lithium-ion battery cells consist of three main components: the positive electrode, separator, and negative electrode. Both the positive and negative electrodes contain solid particles, and the electrolyte permeates the porous structure of these electrodes as well as the separator, allowing lithium ions to move between the electrodes. When the battery is charged or discharged, lithium ions migrate through the electrolyte from the negative electrode to the positive electrode, or vice versa, driven by the potential difference between the electrodes. During this process, lithium ions 3enter or exit the solid particles within the electrodes, causing changes in lithium concentration inside these particles as a result of electrochemical reactions occurring at the interfaces. These electrochemical reactions and resulting concentration changes play a crucial role in determining the battery’s capacity, efficiency, and performance. The P2D model, proposed in [10], captures the complex dynamics within a lithium-ion battery cell by modeling the transport and diffusion of lithium ions along the through-thickness of the cell, denoted as the x-direction. The model assumes that lithium ions move through the electrolyte in thex-direction, while lithium-ion diffusion within each spherical solid particle in the electrodes occurs symmetrically along the radial direction r. In this paper, we denote the lengths of the positive electrode, separator, and negative electrode as Lp,Ls, and Ln, respectively. Then, x∈[0, Lp] =:Dpcorresponds to the positive electrode, x∈[Lp, Lp+Ls] =:Dsrepresents the separator, and x∈[Lp+Ls, Lp+Ls+Ln] =:Dnrepresents the negative electrode. For simplicity, we denote the total length as L:=Lp+Ls+Ln. For the radial direction within solid particles, the coordinate rranges from 0 to Rpin the positive electrode and from 0 to Rnin the negative electrode, where RpandRndenote the radii of the solid particles in each electrode, respectively. The primary variables of the P2D model include: (1) the solid-phase lithium-ion concentra- tion, cs,i(i=p, n), in the positive and negative electrodes; (2) the solid-phase potential, ψi (i=p, n), in the electrodes; (3) the lithium-ion concentration, ci(i=p, s, n ), in the electrolyte; and (4) the liquid-phase potential, ϕi(i=p, s, n ), in the electrolyte. Here, p,s, and nrepre- sent the positive electrode, separator, and negative electrode, respectively. Additional variables, such as the overpotential ηiand ionic flux ji, are also considered. A comprehensive summary of these state variables and other quantities used in the P2D model is provided in Table 1. Using these variables, the governing equations of the P2D model are formulated to describe the time evolution of the state variables as follows. Solid Phase Concentration (Fick’s Second Law in Spherical Coordinates): For each i=p, n, ∂cs,i ∂t=1 r2∂ ∂r r2Ds,i∂cs,i ∂r , r ∈(0,Ri). The boundary conditions are specified as follows:   −Deff s,i∂cs,i ∂r= 0,atr= 0, −Deff s,i∂cs,i ∂r=jiatr=Ri, Liquid Phase Concentration : For i=p, s, n , we write ϵi∂ci ∂t=∂ ∂x Deff i∂ci ∂x + (1−t0 +)aiji. The boundary conditions are given as follows: −Deff p∂cp ∂x= 0 at x= 0 and −Deff n∂cn ∂x= 0 at x=L. The interfacial conditions are given to impose continuity and their flux continuity at the inter- faces: (cp=cs −Deff p∂cp ∂x=−Deff s∂cs ∂xx=Lp and(cs=cn −Deff s∂cs ∂x=−Deff n∂cn ∂xx=Lp+Ls. 4Solid Phase Potential (Ohm’s Law): For each i=p, n,   σeff p∂2ψp ∂x2=apFjp x∈(0, Lp) −σeff p∂ψp ∂x=Iapp x= 0, −σeff p∂ψp ∂x= 0 x=Lpand  σeff n∂2ψn ∂x2=anFjn x∈(0, Ln) −σeff n∂ψn ∂x= 0 x=Lp+Ls, ψn= 0 x=L, where Iappis the applied current density. Liquid Phase Potential (based on Ohm’s Law): For i=p, s, n , −∂ ∂x κeff i∂ϕi ∂x +2RT(1−t0 +) F∂ ∂x κeff i∂logci ∂x =aiFji. The boundary conditions are given as follows: −κeff p∂ϕp ∂x= 0 at x= 0 and −κeff n∂ϕn ∂x= 0 at x=L. The interfacial conditions are given to impose continuity and their flux continuity at the inter- faces:   ϕp=ϕs −κeff p∂ϕp ∂x=−κeff s∂ϕs ∂xx=Lp and  ϕs=ϕn −κeff s∂ϕs ∂x=−κeff n∂ϕn ∂xx=Lp+Ls. The aforementioned state variables are coupled by the ionic flux ji, which is given by the following Butler-Volmer equation: ji=  2ki(cs,i,max−cs,i,surf)0.5c0.5 s,i,surfc0.5 isinhF 2RTηi fori=p, n 0 for i=s(1) where cs,i,surf=cs,i(Ri), and ηirepresents the over-potential defined as: ηi=ψi−ϕi−Uics,i cs,i,max , andUidenotes the open circuit potential. Interested readers may consult with [28] for well-posedness, and [16, 13] for numerics. 2.2. Physics-Informed Neural Networks Physics-Informed Neural Networks (PINNs), as proposed in [19], are a deep learning frame- work designed to solve both forward and inverse problems for partial differential equations (PDEs) within a unified framework. For simplicity, we consider the following simple example. Let Ω ⊂Rdinbe a domain and u:Rdin→Rdoutbe the solution to the following differential equation: N[u](x) =f(x), x∈Ω, B[u](x) =g(x), x∈∂Ω, 5Quantity Description Quantity Description ψ solid phase potential R gas constant ϕ liquid phase potential F Faraday’s constant cs solid phase concentration k electrochemical reaction rate constant c liquid phase concentration ϵ volume fraction η overpotential Brugg Bruggmann constant j ionic flux κ ionic conductivity T temperature Tref Reference temperature D diffusion coefficient Ds diffusion coefficient for solid particle U open circuit potential Iapp applied current density a area σ electronic conductivity of solid matrix t0 + transference number of lithium ion Table 1: A list of battery state variables and other quantities. where Nis a general differential operator and Bis a boundary operator. Note that the boundary condition can also represent initial conditions in time-dependent problems. PINNs approach approximates the solution uby using a neural network approximation uθ⋆, where θ⋆denotes the optimal set of neural network parameters. These parameters are obtained by solving the following minimization problem: θ⋆= arg min θLPINN(θ), where the loss function LPINN(θ) is defined as: LPINN(θ) =Z Ω|N[uθ](x)−f(x)|2 2dx+λZ ∂Ω|B[uθ](s)−g(s)|2 2dσ(s). (2) Here, σis a surface measure, and λis a weighting parameter balancing the importance of the differential equation and the boundary conditions. In practice, the integrals in (2) are approx- imated using numerical quadrature methods. Common approaches include the trapezoidal rule [29], Gauss quadrature [30], and Quasi-Monte Carlo methods, such as the Sobol sequence [31]. The choice of the quadrature method can significantly impact the accuracy and efficiency of the PINN approach and may depend on the specific problem and domain characteristics. 3. Physics-Informed Neural Networks for the P2D model In this section, we apply PINNs to solve the P2D model. The P2D model includes two interfaces: one between the positive electrode and the separator, and the other between the sep- arator and the negative electrode. The interfacial conditions enforce that for the liquid-phase concentration ciand the potential ψi, they and their flux are continuous at the interfaces of both the electrodes and the separator. The flux continuity conditions can cause discontinuities in the first derivatives, which makes it difficult for a single approximate network defined over the whole x-axis to satisfy the flux continuity. For this reason, we adopted the domain decomposi- tion approach, where the computational domain is divided into three subdomains— Dp,Ds, and Dn—with separate networks used to approximate each state variable within each subdomain. In other words, each of the main battery state variables, such as cs,i,ci,ϕi, and ψi, is approximated by a separate neural network for each region Di(i=p, s, n ), denoted as ecs,i,eci,eϕi, andeψi, re- spectively. The interfacial conditions are enforced through penalty loss, which will be discussed in Section 3.3. 6In PINN frameworks, one of the conventional ways to train the networks is to minimize the following loss, given as: LPINN(θ) :=LPDE(θ) +λICLIC(θ) +λBCLBC(θ) +λInterLInter(θ) (3) where θrepresents the network parameter and each of loss function and λ•are weighting pa- rameters to be chosen appropriately. Each term in the loss function— LPDE(θ),LIC(θ),LBC(θ), andLInter(θ)—is conventionally defined to enforce the PDEs, boundary/initial conditions, and the interface conditions into the networks. Specifically, the PDE residual loss LPDE(θ) can be split into four parts, corresponding to the main variables: Lcs,PDE(θ),Lc,PDE(θ),Lϕ,PDE(θ), and Lψ,PDE(θ). For example, the PDE residual loss Lc,PDE(θ) for the liquid concentration cis given as Lc,PDE(θ) =X i∈{p,s,n}Z [0,T]×Di×[0,Ri]ϵi∂eci ∂t−∂ ∂x Deff∂eci ∂x −(1−t0 +)aieji2 dtdxdr, (4) where the approximate ionic flux ejiis algebraically computed by eji= 2k(cs,max−ecs,i,surf)0.5ec0.5 s,i,surfec0.5 isinhF 2RT eϕi−eψi−U(ecs,i/cs,max) , according to the original relation (1). The PDE residual losses for the other state variables are given similarly. Likewise, the initial, boundary, and interface condition losses can also be split into four parts. For instance, the losses for the liquid-phase concentration ciare given as follows: Lc,IC(θ) =X i=p,s,nZ Dieci(0, x)−c0 i(x)2dx, Lc,BC(θ) =Z [0,T]Deff p∂ecp ∂x(t,0)2 +Deff n∂ecn ∂x(t, L)2 dt, Lc,Inter(θ) =Z [0,T]Deff p∂ecp ∂x(t, Lp)−Deff s∂ecs ∂x(t, Lp)2 +|ecp(t, Lp)−ecs(t, Lp)|2 +Deff s∂ecs ∂x(t, Lp+Ls)−Deff n∂ecn ∂x(t, Lp+Ls)2 +|ecs(t, Lp+Ls)−ecn(t, Lp+Ls)|2dt The boundary, initial, and interface losses for other variables are defined similarly, following the same manners. This conventional approach is illustrated in Figure 1. While PINNs, in principle, can be applied to solve a wide range of PDEs, they have been known to exhibit failure modes [32], particularly in complex non-linear PDEs. When applying the vanilla PINN approach to the P2D model, it often encounters such failure modes due to the system’s inherent complexity and nonlinearity. In the remainder of this section, we introduce methods tailored specifically for the P2D model to improve PINNs’ performance. 3.1. Multi-Scale Issues One of the challenges in applying PINNs to the P2D model lies in the significant scale dif- ferences between the microscopic and macroscopic coordinates, as well as the various physical and chemical constants in the system. The P2D model considers two spatial coordinates: (1) macroscopic coordinates x, representing the through-thickness position across the electrolyte and electrodes, and (2) microscopic coordinates r, representing the radial position within solid parti- cles. These scale differences pose numerical difficulties in the optimization process, particularly 7Figure 1: A schematic diagram of the PINN architecture for the P2D model of a lithium-ion battery cell. when the scales differ by several orders of magnitude. Additionally, the physical and chemical constants, such as diffusion coefficients, and conductivity, exhibit vast disparities in scale, further complicating the learning process in the PINN framework. Such scale-related issues have been widely reported not only in classical numerical methods but also in several SciML methods. One of the simplest but effective techniques to address these issues is non-dimensionalization. Following this, we adopt a non-dimensionalized form of the P2D model to mitigate the scaling problems. Specifically, the coordinate components t,xandr, and the state variable cs,i,ci,ϕi, and ψiare rescaled as follows: ˆt=t T,ˆx=x L,ˆr=r Ri,ˆcs,i=cs,i cs,max,ˆci=ci cref,ˆϕi=ϕi ϕref,and ˆψi=ψi ψref, which gives ˆt,ˆx,ˆr∈[0,1], ˆcs,i∈[0,1], and ˆ ci,ˆϕi,ˆψi∼ O(1). Following this non-dimensionalization, the rescaled governing equations are given as follows: Solid Phase Concentration : For i=p, s, n , ˆr∂ˆcs,i ∂ˆt=TDs,i R2 i 2∂ˆcs,i ∂ˆr+∂2ˆcs,i ∂ˆr2 . The boundary conditions are specified as follows:   ∂ˆcs,i ∂ˆr= 0 at ˆ r= 0, ∂ˆcs,i ∂ˆr=Riji −Deff s,iat ˆr= 1, Liquid Phase Concentration : For each i=p, s, n , ∂ˆci ∂ˆt=Deff iT L2ϵi∂2ˆci ∂ˆx2+(1−t0 +)Taiji ϵicref. 8The boundary conditions are given as follows: ∂ˆcp ∂ˆx= 0 at ˆ x= 0 and∂ˆcn ∂ˆx= 0 at ˆ x= 1. The interfacial conditions are given to impose continuity and their flux continuity at the inter- faces:   ˆcp= ˆcs −Deff p∂ˆcp ∂ˆx=−Deff s∂ˆcs ∂ˆxˆx=Lp Land  cs=cn −Deff s∂cs ∂x=−Deff n∂cn ∂xˆx=Lp+Ls L. Solid Phase Potential : For i=p, n,   ∂2ˆψp ∂ˆx2=L2apFjp σeffpψrefˆx∈(0, Lp/L) ∂ˆψp ∂ˆx=L2Iapp −σeffpψrefˆx= 0, ∂ˆψp ∂ˆx= 0 ˆ x=Lp/Land  ∂2ˆψn ∂x2=L2anFjn σeffnψrefˆx∈(0, Ln/L) ∂ˆψn ∂ˆx= 0 ˆ x= (Lp+Ls)/L, ˆψn= 0 ˆ x= 1. Liquid Phase Potential : For i=p, s, n , −∂ ∂ˆx  κeff i∂ˆϕi ∂ˆx! +2RT(1−t0 +) F∂ ∂ˆx κeff i∂log ˆci ∂ˆx =L2aiFji. The boundary conditions are given as follows: −κeff p∂ˆϕp ∂ˆx= 0 at ˆ x= 0 and −κeff n∂ˆϕn ∂ˆx= 0 at ˆ x= 1. The interfacial conditions are given as follows:   ˆϕp=ˆϕs −κeff p∂ˆϕp ∂ˆx=−κeff s∂ˆϕs ∂ˆxˆx=Lp Land  ˆϕs=ˆϕn −κeff s∂ˆϕs ∂ˆx=−κeff n∂ˆϕn ∂ˆxˆx=Lp+Ls L. Butler-Volmer Equation With the rescaled state variables ˆ cs,i, ˆci,ˆϕi, and ˆψi, the formula for the reaction rate jiis also rewritten as follows: ji=  2kics,i,maxc0.5 ref(1−ˆcs,i,surf)0.5ˆc0.5 s,i,surfˆc0.5 isinhF 2RTηi fori=p, n 0 for i=s where ηiis given as: ηi=ψrefˆψi−ϕrefˆϕi−Ui(ˆcs,i). Throughout this paper, we will use cref= 103, and ϕref=ψref= 1. In all the following sections, we will consider only the rescaled form of the P2D model, obtained via the above non- dimensionalization. For simplicity, we omit the ˆ•notation, and all variables will be referred to in their rescaled forms. 93.2. Initial and Boundary conditions As shown in the PINN loss (2), PINNs generally enforce boundary and initial conditions on the neural network through penalty-type loss functions. This approach, commonly referred to as the soft constraint method or penalty method, has been effective in many cases. However, the imbalance between the PDE residual loss and the penalty loss can lead to training instability and failure, even for relatively simple cases [33]. To address this issue, an alternative approach is to redesign the neural network architecture so that it inherently satisfies the boundary and initial conditions, eliminating the need for additional penalty loss terms. This method, commonly known as the hard constraint method, has been widely applied in PINN applications [34]. Adopting this hard constraint approach, we reconstruct the network architectures in such a way that it automatically satisfies some of the boundary and initial conditions, as follows: The liquid concentration We use the following structure of network to approximate the liquid concentration ci: eci(t, x;θ) =c0 i(x) exp ( t·MLP( t, x;θ)), fori=p, s, n, which directly enforce that the approximate solution ec(t, x;θ) satisfies the initial condition: eci(0, x;θ) =c0 i(x), fori=p, s, n. The solid concentration For the solid concentration cs,pin the positive electrode, we use ecs,p(t, r, x ;θ) = 1−exp − s log1 1−c0s,p(r, x) +t·MLP( t, r, x ;θ)!2 , and for the solid concentration in the negative electrode, ecs,n(t, r, x ;θ) = exp − s log1 c0s,n(r, x) +t·MLP( t, r, x ;θ)!2 . From the construction of approximate solutions, it follows that ecs,i(0, r, x;θ) =c0 s,p(x) =c0 s,i(r, x) for i=p, n. The solid potential For the solid potential ψnin the negative electrode, we utilize eψn(t, x;θ) = (1 −x)·MLP( t, x;θ), which implies that eψn(t,1;θ) = 0 , where we note that each MLP( ·;θ) represents a different fully-connected neural network. Through this hard-constraint method, the approximate solutions by the neural networks automatically satisfy the initial conditions and Dirichlet boundary conditions without the need for imposing the initial and Dirichlet boundary conditions through soft constraints. However, for Neumann boundary conditions, we do not apply the hard-constraint method and instead continue using the penalty method for training. 103.3. Interfacial conditions Unlike boundary or initial conditions, enforcing interfacial conditions through a hard-constraint method is not straightforward, since at least two approximate solutions from different networks are involved at one interface condition. Based on lessons from the additive Schwarz method, it is reasonable to expect that naively imposing interface conditions could lead to reduced infor- mation exchange and potentially slower convergence due to limited communication between the individual neural networks. To explore how PINNs handle complex interface conditions, we tested a simplified paradigm example to represent the geometry of a lithium-ion battery:   ux= 0, ϕ x= 0 x= 0, ut=4 πuxx−π2 4ϕ+ cosπ 2x cos(t), ϕ xx=u x ∈(0,1), u=v,4ux=vx, ϕ = 0 x= 1, vt=1 4π2vxx−sin(2πx) (sin( t) + cos( t)) x∈(1,2), v=w, v x= 2wx, ψ = 0 x= 2, wt=1 π2wxx−ψ−sin(πx) cos( t), ψ xx=w x ∈(2,3), w=wsol, ψ x= 0 x= 3.(5) The exact solution for the equations is given by: usol(x, t) = cosπ 2x sin(t), vsol(x, t) =−sin(2πx) sin(t), wsol(x, t) =−sin(πx) sin(t), ϕsol(t, x) =−4 π2cosπ 2x sin(t), ψsol(t, x) =1 π2sin(πx) sin(t).(6) This paradigm example represents a simplified scenario that reflects the essential dynamics of a lithium-ion battery system. It enables us to validate the performance of the domain decom- position method in handling interfacial conditions with discontinuous derivatives. By applying appropriate boundary and interface conditions, this setup captures the behavior of the electrodes and the separator. To solve this system using PINNs, we use five neural networks—one for each variable. Inter- face conditions are incorporated into the physics-informed loss function by adding appropriate penalties. Figure 2 shows the result of the simulation. Despite the complexity of the system, which includes four boundary conditions, six interface conditions, and five PDEs (5), the PINN framework successfully approximates the exact solution with only the penalty method on the in- terfacial conditions. Through this paradigm example, we found that a simpler approach—adding soft penalties—is surprisingly sufficient to ensure proper information exchange between the sub- domains. In this section, we have addressed multi-scale issues and the enforcement of boundary, initial, and interfacial conditions in applying PINNs to the P2D model. While these general techniques 11x0 1 2 3−0.50.00.5Concentration x0 1 2 3−0.3−0.2−0.10.00.1PotentialExact PredictionFigure 2: Comparison of the PINN result for (5) to the exact solution (6). The left figure presents concentration variables u, v, and w. The right figure shows potential variables ϕandψ. Note that potential values are zero in [1,2], to imitate the separator. help mitigate many common challenges, more sophisticated approaches are still required to effec- tively solve the full P2D model. The most significant challenge arises from the highly non-linear Butler-Volmer equation. In the following section, we will discuss the complexities posed by the BV equations of the P2D mdoel in detail. 4. Highly non-linear Butler-Volmer equation The Butler-Volmer (BV) equation (1), which governs the electrochemical reaction rates at the interface between the solid particles and the electrolyte in the P2D model, poses major challenges in applying Physics-Informed Neural Networks (PINNs). The BV equation is highly nonlinear, making it one of the most challenging aspects of the P2D model to address through PINN frameworks. To better understand this, consider the rescaled governing equation for the solid potential ψp: ∂2ψp ∂x2=L2apFjp σeffpψref, forx∈(0,1), where the source term on the right-hand side is given as: 2kcs,p,maxc0.5 refL2apF σeffψref(1−cs,p,surf)0.5c0.5 s,p,surfc0.5 p | {z } =:HsinhF 2RT|{z} =:Gηp , (7) according to the definition of jpin (1). Notably, the constant Ginside the hyperbolic sine function in (7) is approximately 19.5. As shown in the left plot of Figure 3, the graph of f(η) = sinh(19 .5η) demonstrates a very fast growth rate as ηincreases. Recalling that ηp=ϕp−ψp−Up, we note that small changes in the approximate solutions ϕpandψpcan lead to large fluctuations in the loss function, exacerbating instability during training. The impact of this issue is illustrated in 12the upper right panel of Figure 3, which shows the loss behavior obtained using the conventional PINN approach described earlier. During the early stages of training, the initial loss reaches a magnitude of approximately O(1075). In contrast, when ηis manually set to zero, the starting loss value drops to approximately O(10−1), clearly demonstrating the ill-conditioning posed by the BV equation. 𝜂0.0 0.5 1.0f 10−1010−5100105f(𝜂)=sinh(19.5𝜂) 1068.01068.51069.01069.51070.0PINN Loss 100 iters0 50 10010−0.77510−0.75010−0.725vanilla 𝜂=0 Figure 3: The left panel displays the graph of the function f(η) = sinh(19 .5η), while the right panel illustrates how errors in ηare amplified when evaluating the PINN loss. The solid line represents the baseline, whereas the dashed line corresponds to the scenario where η= 0 is manually enforced. These results highlight why the nonlinear Butler-Volmer equation (1) is the primary contributor to the large PINN loss values. On the other hand, a different issue also arises. The term Hin (7) is relatively smaller in magnitude compared to other variables, which are rescaled to be on the order of 1. Although the sinh function grows exponentially, it behaves linearly near the origin, where the over-potential η lies in most practical scenarios. Due to the smallness of H, the source term (7) exhibits only very small linear changes when η≪1. This implies that even if the approximate solution eψpdoes not match the true solution ψpand is instead shifted by a constant, the shifted function eψpcan still yield a relatively small PDE residual loss. Furthermore, the boundary loss would remain exactly zero. As a result, it is necessary to capture these small variations at a highly precise level to distinguish between ψpandeψp. This issue complicates the application of PINNs to solving the P2D model. In order to illustrate the practical impact of this issue posed by the nonlinear BV equation, we consider a simplified paradigm example. This example is designed to experimentally showcase how the issue by a small change of the source term could make a significant challenge when applying PINNs to the P2D model, emphasizing the importance of addressing these challenges effectively. The paradigm example is given as follows:   ϕxx=j, x ∈(0,1), ϕx=−10−4, x = 0, ϕ = 0, x = 1,and( ψxx+f=j, x ∈(0,1), ψx = 0, x∈ {0,1},(8) 13where the source term jis given by j=j0  eψ−ϕ+U−1 , f (x) = (10−3−10−4)(1−x)8+ 6x−3, U(x) =x2(x−1.5) + 4 −10−5(1−x)10+ log  j−1 0(10−3−10−4)(1−x)8+ 1 , andj0is a parameter to be chosen later. The exact solutions for ϕandψare: ϕ(x) = 10−5(1−x)10, and ψ(x) =−x2(x−1.5)−4. We note that in this problem, the term j0plays a role similar to Hin the original P2D model. Let us now consider a shifted function eψgiven as eψ=ψ+ϵ, then by using Taylor expansion: eeψ−ϕ+U−1≈eψ−ϕ+U−1 +eψ−ϕ+Uϵ=j j0+eψ−ϕ+Uϵ. Letting ej=j0 eeψ−ϕ+U−1 , we obtain: ej≈j+j0eψ−ϕ+Uϵ. Since eψ−ϕ+U=j−1 0(10−3−10−4)(1−x)8+ 1≤j−1 0(10−3−10−4) + 1, the shifted function eψresults in a change in the source term jby approximately j0ϵ+ 10−3ϵ. Therefore, the PDE residual of the shifted function eψis |eψxx+f−ej|=|j−ej| (since eψxx=ψxx) =O(j0ϵ+ 10−3ϵ), while the boundary loss is exactly zero as the boundary conditions of ψare Neuman-type. When ϵ=O(1) and j0= 10−1, a PDE residual loss of O(10−2) from eψsuggests that the shift has a significant impact. However, if j0is much smaller, such as j0= 10−3, the PDE residual loss would need to be below O(10−6) to capture the constant shift. In typical PINN training, it is generally impossible to minimize the loss function exactly to zero, and the loss typically converges to an order of 10−4or 10−5. However, where the required PDE residual loss for eψmust be smaller than the achieved loss, the PINN may be unable to distinguish between the true solution ψand the slightly shifted function eψas both result in nearly identical loss values at that precision. Consequently, when j0is very small, the network struggles to accurately identify the true solution. The experimental results presented in Figure 4 support our observation. Specifically, for a relatively large j0= 10−1, the PINN can find the correct solution with ease. However, for a smaller j0= 10−3, the PINN solution is incorrect, which looks shifted from the true solution. This aligns with our observation that PINNs struggle to distinguish between the true solution and a solution shifted by a constant when j0is small. PINNs fail to differentiate small changes in the PDE residuals, leading to an inaccurate prediction. This paradigm example illustrates a key challenge that comes from the highly nonlinear nature of the BV equation, combined with small scaling factors H, which makes it difficult for the networks to accurately capture the true solution. In conclusion, this observation emphasizes the importance of carefully addressing the issue from the BV equation when applying PINNs to the P2D model. Remark 1. It is worth highlighting the study by Hassanaly et al. [35], which faced similar challenges when training PINNs for the SPM with the nonlinear BV equation. Their solution involved a two-step training approach: first, training on a linearized version of the BV equation 14x0.0 0.5 1.0Absolute Error 10−410−310−2j x0.0 0.5 1.010−310−210−1100𝜓 x0.0 0 .5 1.010−710−610−510−4𝜙j0= 10−1j0=10−2j0= 10−3Figure 4: PINN results for the paradigm model (8) with j0∈ {10−1,10−2,10−3}. The vertical axes represent absolute error. and then transferring the learned parameters to the nonlinear model as initialization. While innovative, this method comes with certain limitations–it introduces additional hyperparameters that require careful tuning, and detailed results of their approach were not provided. In contrast, we focus on developing an end-to-end training strategy that avoids these complexities, offering a simpler and more robust alternative for tackling the nonlinear BV equation of the P2D model. 5. Strategies for the non-linear Butler-Volmer equation As discussed in the previous sections, the highly nonlinear nature of the Butler-Volmer (BV) equation can cause significant difficulties in applying PINNs to solve the P2D model. In this section, we propose two strategies aimed at mitigating these challenges: the introduction of a bypassing term to stabilize the training process and the addition of secondary conservation laws to improve the accuracy of solutions. 5.1. Bypassing term The instability caused by the exponential growth of the sinh term in the BV equation, par- ticularly when applied to PINNs, can be attributed to the sensitivity of the overpotential ηto changes in the network parameters. Instead of linearizing the BV equation, we propose a novel approach to reduce the sensitivity of ηduring the optimization process, making it possible to handle the fully non-linear BV equation. Specifically, we introduce a neural network, βθ, which replaces the entire term inside the hyperbolic sine function in the BV equation. In this approach, the approximate reaction rate eji in the PINN loss is computed as eji=2kL2aF σeffψref(cs,max−ecs,surf)0.5ec0.5 s,surfec0.5sinhβθ, (9) instead of the formulation in (4). Then, an additional penalty term is incorporated into the PINN loss to ensure βθaccurately approximates ( F/2RT)η: Z Ω βθ−F 2RTeη2 dx. We refer to this strategy as bypassing . The purpose of this bypassing strategy is to mitigate the risk of exploding loss values during training, which arises due to the instability of the BV equation. 15In [36], Wang et al. observed that an imbalance between the gradients of the PDE loss (∇θLPDEand the boundary condition loss ∇θLBC) can lead to a wide range of eigenvalues in the Hessian matrix, resulting in ill-conditioned training dynamics. This emphasizes the importance of maintaining a balanced gradient distribution for effective training. From this point of view, we can verify the effectiveness of the bypassing strategy. By conducting an eigenvalue analysis, we observed a significant reduction in the condition number after introducing the bypassing term. Although memory constraints required us to perform this analysis with a smaller neural network compared to the one used for the full P2D model in Section 6.1, the results still sufficiently demonstrate the effectiveness of the proposed strategy. The results are visualized in Figure 5. i0 200 400100102510501075Singular values i0 200 4 00Eigenvaluesvanilla by passing Figure 5: Distribution of singular values and eigenvalues of the Hessian matrix. The solid line rep- resents the distribution without the bypassing term, while the dashed line represents the distribution with the bypassing term. The introduction of the bypassing term significantly narrows the spectrum, indicating improved conditioning. The condition numbers were approximately 2 .017·10108without the bypassing term and 4 .599·109 with the bypassing term. Remark 2. Our bypassing strategy is inspired by observations from previous studies. Han et al. [14] successfully solved the P2D model using a finite difference method with backward Euler time stepping. Notably, their approach involved treating ηandjas independent unknowns, despite these quantities being defined by algebraic equations. We hypothesize that this choice was made to address stability issues inherent to the BV equation. Building on their insight, we adopted a similar concept by introducing a neural network, βθ, to approximate a scaled version of η. 5.2. Secondary conservation laws As mentioned in Section 4, due to the small scaling factor Hin the BV term (7), the con- ventional PINN loss struggles to capture the true battery state, particularly for ψp. A function that is quite far from the true solution can still result in a very small loss, and further reducing this loss would require significant computational resources because the corresponding loss value is already small. In other words, minimizing the PINN loss presented in Section 3 is insufficient for accurately approximating the true solution. To address this, we introduce additional constraints based on secondary conservation laws to more accurately approximate the reaction rates eji, which, in turn, guide the approximate 16solutions toward the true solution. Specifically, we enforce the following secondary conservation laws: LapF IappZˆLp 0jpdx= 1,andLanF IappZ1 ˆLp+ˆLsjndx=−1, (10) which are derived by integrating (3.1). These constraints help ensure the correct computation of the reaction rates, which in turn guides the approximation of eψpand other key variables in the P2D model. Our approach, which incorporates the bypassing terms and secondary conservation laws, is illustrated in Figure 7. For the paradigm example presented in Section 4, we can see that this strategy helps prevent the network from converging to a shifted or incorrect solution. For the paradigm example, the corresponding secondary conservation can be expressed as: Z1 0j dx = 10−4. (11) As previously discussed, using a typical PINN loss alone is not sufficient for solving the paradigm example effectively, especially when dealing with the small factor j0. However, by incorporating the additional constraints (11) into the PINN loss function, the PINNs can predict the solution more accurately, as shown in Figure 6. x0.0 0.5 1.0Absolute Erro r 10−610−510−410−310−2j x0.0 0.5 1.010−310−210−1100𝜓 x0.0 0 .5 1.010−710−610−510−4𝜙𝜆=0 𝜆=106 Figure 6: Results for j0= 10−3after adding λLSC(θ) to the PINN loss. Solid lines represent the baseline, whereas dotted lines show the result of adding the secondary conservation law. For jandψ, the error magnitudes are reduced by several orders of magnitude. As demonstrated in the paradigm example, by combining secondary conservation laws with the PINN framework, we can mitigate the challenges posed by the BV equation and improve the network’s ability to capture the true solution with greater accuracy, despite the computational challenges. 5.3. Ablation Study We performed an ablation study to evaluate the individual contributions and combined effec- tiveness of the methods proposed in this section. The results are summarized in Table 2. The Baseline configuration represents the simplest implementation of the PINN framework, with- out the bypassing term or the secondary conservation law. The B configuration includes the bypassing term to address the stiffness of the BV equation, while the SC configuration incor- porates the secondary conservation law into the PINN loss to enhance solution accuracy. The results highlight the challenges posed by the ill-conditioned BV equation in the Baseline and SC configurations, where most line search proposals are rejected, leading to significantly prolonged 17Figure 7: A schematic diagram of our proposed PINN architecture for the P2D model of a lithium-ion battery cell. training times exceeding 8 hours. Notably, while the introduction of the bypassing term (B) improves stability and reduces training time, it is insufficient on its own to prevent failure modes inherent to PINNs. This underscores the importance of the secondary conservation law (SC) as a complementary component to ensure convergence to physically meaningful solutions. Overall, our ablation study demonstrates that neither method is redundant; both the bypassing term and the secondary conservation law are crucial for the efficient and successful simulation of the P2D model. This highlights the robustness of our proposed framework in overcoming the challenges associated with nonlinear BV equations in PINNs. 6. Numerical Experiments We performed numerical experiments for both forward and inverse problems of the P2D model to evaluate the effectiveness of our proposed methods. In our numerical experiments, we used a neural network architecture with a width of 32 and a depth of 4. The optimization process followed a two-step approach, combining ADAM [37] and L-BFGS [38] optimizers, implemented in the Optax package [39] and the JAXopt package [40], respectively. Collocation points were dynamically sampled for ADAM but kept fixed during L-BFGS, using 214points at each step. The ADAM optimizer employed a cosine decay learning rate schedule, starting from 10−4, and the L-BFGS history size was set to 50. Our network utilized the sine activation function, initialized with the SIREN scheme [41]. Computations were carried out on an Nvidia A100 GPU, and the framework JAX [42] was used for automatic differentiation, while visualizations were created using Makie.jl [43]. 18Methods ψ cs ϕ c time(s) final loss Baseline 8.69e-1 7.60e-1 5.18e-1 1.89e-1 31049 1.63e+48 B 2.24e-1 8.96e-1 8.88e-1 2.11e-1 4729 7.32e-8 SC 8.69e-1 7.61e-1 5.17e-1 1.89e-1 50578 1.63e+48 B + SC 4.84e-3 1.31e-2 2.31e-2 6.51e-3 6352 9.15e-6 Table 2: Ablation study results showing relative L2errors. B: Results obtained using the bypassing term to approximate the stiffest component of the BV equation. SC: Results obtained using the secondary conservation law to enhance solution accuracy by preventing convergence to trivial solutions. B+SC: Results obtained when both strategies are applied simultaneously. 6.1. Forward Problem We present the PINN simulation results for the forward problem of the P2D model, demon- strating the effectiveness of our proposed methods in addressing the challenges posed by the fully nonlinear BV equation (1). The simulations were performed using 100k iterations of the Adam optimizer, followed by 100k iterations of the L-BFGS optimizer. Figures 8 and 9 illustrate the spatial distribution and temporal evolution of key battery state variables, evaluated at t= 3500 andx= 0, respectively. Unlike vanilla PINNs, which fail to produce meaningful predictions and deviate significantly from the reference solution, our proposed approach delivers highly accurate results. This close agreement between our PINN solution and the reference solution not only vali- dates the robustness of our computational strategies but also highlights their predictive accuracy over long time horizons. 0.0 0 .5 1 .0012𝜓 0.0 0.5 1.0−1.25−1.00−0.75−0.50−0.25𝜙 0.0 0.5 1. 005.00× 10³1.00×10⁴1.50×10⁴cs x0.0 0 .5 1 .0150020002500c x0.0 0.5 1.0−0.4−0.20.0𝜂 x0.0 0.5 1. 0−1.0×10⁻⁵01.0×10⁻⁵2.0×10⁻⁵jReferenc e O urs V anilla Figure 8: Battery state variables over the spatial domain, evaluated at t= 3500. Our proposed method closely matches the reference solution, whereas vanilla PINNs fail to provide accurate predictions. The learning curves for the PINN optimization are shown in Figure 10. The left panel illustrates the convergence behavior of the Adam optimizer, while the right panel depicts the 190 1 000 200030001234𝜓 0 1000 20003000−1.25−1.00−0.75−0.50−0.25𝜙 0 1000 2000 3 00050001000015000cs t0 1 000 200030001400150016001700180019002000c t0 1000 20003000−0.040−0.035−0.030−0.025−0.020−0.015𝜂 t0 1000 2000 3 000−2.0×10⁻⁵−1.0×10⁻⁵0jReferenc e O urs V anillaFigure 9: Battery state variables over time, evaluated at the left end of the battery. Our method demonstrates excellent agreement with the reference solution. results for L-BFGS. Our approach achieves a relative error on the order of 10−2, demonstrating sublinear convergence, which is characteristic of PINN optimization problems. To the best of our 100 iterations0 500 100010−610−410−2100102Adam 100 iterations0 500 100010−7.510−5.010−2.5L-BFGSLPINN LPDE LBoundary LInterface LConservation Error in Vcell Figure 10: Learning curves. The left panel shows the loss and error trajectories during optimization with the Adam optimizer, while the right panel shows the corresponding trajectories for the L-BFGS optimizer. Please refer to the online version for colored curves. 20knowledge, this is the first successful PINN simulation of a Li-ion battery incorporating the fully nonlinear BV equation (1). The ability of our method to accurately predict battery behavior underscores the high predictive power and reliability of our computational strategy. These results provide a strong foundation for future research into advanced deep-learning methods for complex battery simulations. 6.2. Inverse Problem One advantage of the PINN framework is its ability to estimate model parameters with minimal implementation modifications. Given observational data {u(xi)}N i=1, we incorporate a data fitting term into the PINN loss LPINN (2) and treat the unknown parameters αas learnable parameters. This leads to the following loss function for the inverse problem: L(θ, α) =Z Ω|Nα[uθ](x)−f(x)|2 2dx+λZ ∂Ω|Bα[uθ](s)−g(s)|2 2dσ(s)+λdataNX i=1(uθ(xi)−u(xi))2. The minimizer ( uθ⋆, α⋆) of this loss function will yield a solution ( uθ⋆, α⋆) that satisfies the gov- erning PDE and boundary conditions, while also fitting the observed data closely, thus providing a solution to the inverse problem. With a more reliable method for solving the forward problem now in place, we are prepared to address inverse problems using the reference solution as our data. Our focus is on inverse problems related to battery length, which is considered a crucial factor in the performance of Li-ion batteries [44]. In the following, we perform experiments on three inverse tasks: estimating the battery length, the length ratio, and both battery length and length ratio simultaneously. These tasks are evaluated under two scenarios: the first uses noise- free observational data, while the second introduces 5% Gaussian noise into the observational data. The detailed results are presented in Table 3. Our proposed methodology demonstrates strong predictive performance across all scenarios. Notably, even in the presence of noisy ob- servational data, the predictions remain comparable to those obtained with clean data. This robustness to noise underscores the reliability and effectiveness of our approach in solving inverse problems, even under challenging conditions. Length Length, Noisy Data Ratio Ratio, Noisy Data True L= 3.26 (Lp, Ln) = (1 .74,1.00) Prediction 3.220 3.221 (1.638, 1.002) (1.638, 1.002) Error 1.227e-2 1.196e-2 (4.739e-2, 1.827e-3) (4.767e-2, 2.0e-3) Data Loss 3.913e-3 4.782e-2 2.598e-3 4.648e-2 Table 3: Results for inverse problems. Error is a relative error, |Prediction −True|/|True|. Battery length. The first example involves estimating the total battery length, L, while main- taining a fixed ratio of Lp:Ls:Ln= 1.74 : 0 .52 : 1 .0. Although this problem involves only a single parameter, it is nontrivial due to its impact on 11 coefficients in the P2D model after non-dimensionalization, particularly those associated with spatial partial derivatives along x. To parameterize L, we expressed it as ˆL·10−4with an initial value of ˆL= 1. After 150,000 itera- tions of the Adam optimizer, we obtained ˆL= 3.22, corresponding to a relative error of 1.23% compared to the true value L= 3.26. The entire computation was completed in approximately 30 minutes. Length ratio. The second example focuses on estimating the ratio of the battery section lengths, Lp:Ls:Ln, while keeping the total battery length fixed at L= 3.26·10−4. This task introduces additional complexity due to the dynamically changing domain lengths during optimization, 21which limits the effectiveness of the L-BFGS optimizer. To simplify the parameterization, we used two parameters, ρpandρn, since the constraint ρp+ρs+ρn= 1 reduces the problem to two degrees of freedom. The initial values were set to ˆ ρp= ˆρn= 0.4. Our method estimated ˆLp= ˆρp·L= 1.64·10−4and ˆLn= ˆρn·L= 1.002·10−4, achieving relative errors of 5.75% and 0.2% for the positive and negative electrode lengths, respectively. The computation was completed in approximately 40 minutes. Battery length and length ratio. Finally, we extended the problem to simultaneously esti- mate both the battery length and the length ratio. This combined task represents a significantly more challenging problem due to the increased dimensionality and the inherent coupling between the two parameters. Accurate estimation in such scenarios requires the framework to handle dy- namic changes in both domain lengths and parameter dependencies throughout the optimization process. Starting with the same initialization for ˆL,ˆρp, and ˆ ρn, our method estimated ˆL= 2.996, ˆLp= 1.511·10−4, and ˆLn= 9.401·10−5. The relative errors for these estimates were 8 .098·10−2, 1.316·10−1, and 5 .99·10−2, respectively. These results demonstrate the robustness of our method in tackling complex coupled inverse problems. 6.3. A note on implementation The P2D model tightly interconnects battery state variables. For instance, calculating the ionic flux jnecessitates computing β,c, and cs,surffor the BV equation. While frameworks like JAX-PI [36] offer readable implementations, they can be computationally inefficient due to redundant calculations. As shown in Figure 11a, a JAX-PI-style implementation repeatedly computes j, hindering its reuse for the potential and surface concentration PDEs. To optimize computational efficiency, we adopt a strategy that prioritizes minimizing network forward passes. By initially calculating all required quantities collectively and then assembling the PDE residuals, we significantly reduce redundant computations. This approach, illustrated in Figure 11b, is expected to yield significant speedups. Our implementation demonstrates this, achieving roughly 1.5 times the performance of a naive approach (14 iterations per second compared to 9). 7. Discussion and conclusion This study has addressed the challenges of simulating lithium-ion batteries using the P2D model in combination with PINNs and has proposed effective strategies to overcome these obsta- cles. Our methods enable reliable and accurate simulations of the P2D model, incorporating the fully nonlinear Butler-Volmer equation. By developing an enhanced forward solver, we success- fully tackled inverse problems related to battery section lengths, achieving remarkable accuracy and computational efficiency. Despite the inherent complexity of these problems, our framework delivers results that hold significant engineering relevance for the design and optimization of lithium-ion batteries. These achievements highlight the practical applicability of our approach and its ability to solve inverse problems that might not be infeasible for traditional numerical methods. However, there is still room for further development. For instance, extending our framework to incorporate multiphysics phenomena such as thermal effects or aging, which are currently excluded from our equations, presents an exciting and challenging avenue for future research. Additionally, building on our forward problem solver to develop an operator network capable of real-time predictions is another promising direction. Acknowledgements The work of M.-S. Lee was supported by Basic Science Research Programs through the National Research Foundation of Korea(NRF) funded by the Ministry of Education (RS-2023- 22import jax def psi_pde(p2d, net, t, x): psi_xx = jax.jacfwd(jax.jacfwd(net.psi, 1), 1)(t, x) cs_surf = net.cs(t, 1.0, x) c = net.c(t, x) beta = net.beta(t, x) j = p2d.compute_j(beta, cs_surf, c) return psi_xx - (p2d.L**2 * p2d.a * F * j) ... (a) Implementation like JAX-PI. def compute_quantities(net, t, x): psi_xx = jax.jacfwd(jax.jacfwd(net.psi, 1), 1)(t, x) cs_surf = net.cs(t, 1.0, x) c = net.c(t, x) beta = net.beta(t, x) ... return {"psi_xx":psi_xx, "cs_surf":cs_surf, "c":c, "beta":beta, ...} def compute_psi_pde(p2d, psi_xx, j): return psi_xx - (p2d.L**2 * p2d.a * F * j) ... def compute_pdes(p2d, quantities): j = p2d.compute_j(quantities["beta"], quantities["cs_surf"], quantities["c"]) psi_pde = compute_psi_pde(quantities["psi_xx"], j) cs_pde = compute_cs_pde(quantities["cs_rr"], quantities["cs_r"], j) ... return pdes (b) Our implementation Figure 11: Python pseudo-code 00244475 and RS-2024-00462755). The work of Y. Hong was supported by the Basic Science Research Program through the National Research Foundation of Korea (NRF), funded by the Ministry of Education (NRF-2021R1A2C1093579), the Korean government (MSIT) (RS-2023- 00219980), and Hyundai Motor Company. The authors also thank the Performance Concept Technology Research Lab at Hyundai Motor Company for their valuable discussions. References [1] G. Zubi, R. Dufo-L´ opez, M. Carvalho, G. Pasaoglu, The lithium-ion battery: State of the art and future perspectives, Renewable and sustainable energy reviews 89 (2018) 292–308. [2] T. M. Bandhauer, S. Garimella, T. F. Fuller, A critical review of thermal issues in lithium-ion batteries, Journal of the electrochemical society 158 (3) (2011) R1. [3] V. Etacheri, R. Marom, R. Elazari, G. Salitra, D. Aurbach, Challenges in the development of advanced li-ion batteries: a review, Energy & Environmental Science 4 (9) (2011) 3243–3262. [4] C. M. Costa, J. C. Barbosa, R. Gon¸ calves, H. Castro, F. Del Campo, S. Lanceros-M´ endez, Recycling and environmental issues of lithium-ion batteries: Advances, challenges and op- portunities, Energy Storage Materials 37 (2021) 433–465. 23[5] R. Xiong, L. Li, J. Tian, Towards a smarter battery management system: A critical review on battery state of health monitoring methods, Journal of Power Sources 405 (2018) 18–29. [6] Y. Wang, J. Tian, Z. Sun, L. Wang, R. Xu, M. Li, Z. Chen, A comprehensive review of battery modeling and state estimation approaches for advanced battery management systems, Renewable and Sustainable Energy Reviews 131 (2020) 110015. [7] M. Nikdel, et al., Various battery models for various simulation studies and applications, Renewable and Sustainable Energy Reviews 32 (2014) 477–485. [8] G. L. Plett, Extended kalman filtering for battery management systems of lipb-based hev battery packs: Part 3. state and parameter estimation, Journal of Power sources 134 (2) (2004) 277–292. [9] W. Li, M. Rentemeister, J. Badeda, D. J¨ ost, D. Schulte, D. U. Sauer, Digital twin for battery systems: Cloud battery management system with online state-of-charge and state-of-health estimation, Journal of energy storage 30 (2020) 101557. [10] M. Doyle, T. F. Fuller, J. Newman, Modeling of galvanostatic charge and discharge of the lithium/polymer/insertion cell, Journal of the Electrochemical society 140 (6) (1993) 1526. [11] M. Doyle, J. Newman, A. S. Gozdz, C. N. Schmutz, J.-M. Tarascon, Comparison of modeling predictions with experimental data from plastic lithium ion cells, Journal of the Electrochem- ical Society 143 (6) (1996) 1890. [12] K. Kumaresan, G. Sikha, R. E. White, Thermal model for a li-ion cell, Journal of the Electrochemical Society 155 (2) (2007) A164. [13] L. Cai, R. E. White, Mathematical modeling of a lithium ion battery with thermal effects in comsol inc. multiphysics (mp) software, Journal of Power Sources 196 (14) (2011) 5985–5989. [14] R. Han, C. Macdonald, B. Wetton, A fast solver for the pseudo-two-dimensional model of lithium-ion batteries, arXiv preprint arXiv:2111.09251 (2021). [15] J. Mora-Paz, High-order transient multidimensional simulation of a thermo-electro-chemo- mechanical model for lithium-ion batteries, arXiv preprint arXiv:2403.16928 (2024). [16] M. Torchio, L. Magni, R. B. Gopaluni, R. D. Braatz, D. M. Raimondo, Lionsimba: a matlab framework based on a finite volume model suitable for li-ion battery design, simulation, and control, Journal of The Electrochemical Society 163 (7) (2016) A1192. [17] V. Sulzer, S. G. Marquis, R. Timms, M. Robinson, S. J. Chapman, Python battery mathe- matical modelling (pybamm), Journal of Open Research Software 9 (1) (2021). [18] M. D. Berliner, D. A. Cogswell, M. Z. Bazant, R. D. Braatz, Methods—PETLION: Open- source software for millisecond-scale porous electrode theory-based lithium-ion battery sim- ulations, Journal of The Electrochemical Society 168 (9) (2021) 090504. [19] M. Raissi, P. Perdikaris, G. E. Karniadakis, Physics-informed neural networks: A deep learning framework for solving forward and inverse problems involving nonlinear partial differential equations, Journal of Computational physics 378 (2019) 686–707. [20] Q. He, D. Barajas-Solano, G. Tartakovsky, A. M. Tartakovsky, Physics-informed neural net- works for multiphysics data assimilation with application to subsurface transport, Advances in Water Resources 141 (2020) 103610. 24[21] H. Jo, H. Hong, H. J. Hwang, W. Chang, J. K. Kim, Density physics-informed neural networks reveal sources of cell heterogeneity in signal transduction, Patterns 5 (2) (2024). [22] H. Son, M. Lee, A pinn approach for identifying governing parameters of noisy thermoa- coustic systems, Journal of Fluid Mechanics 984 (2024) A21. [23] J. Ostanek, M. Parhizi, J. Jeevarajan, A novel method for alleviating numerical stiffness in li-ion thermal abuse models, Journal of Power Sources Advances 23 (2023) 100123. [24] C. Xue, B. Jiang, J. Zhu, X. Wei, H. Dai, An enhanced single-particle model using a physics- informed neural network considering electrolyte dynamics for lithium-ion batteries, Batteries 9 (10) (2023) 511. [25] M. Hassanaly, P. J. Weddle, R. N. King, S. De, A. Doostan, C. R. Randall, E. J. Dufek, A. M. Colclasure, K. Smith, Pinn surrogate of li-ion battery models for parameter inference. part ii: Regularization and application of the pseudo-2d model, arXiv preprint arXiv:2312.17336 (2023). [26] K. Zubov, Z. McCarthy, Y. Ma, F. Calisto, V. Pagliarino, S. Azeglio, L. Bottero, E. Luj´ an, V. Sulzer, A. Bharambe, et al., Neuralpde: Automating physics-informed neural networks (pinns) with error approximations, arXiv preprint arXiv:2107.09443 (2021). [27] W. Chen, Y. Fu, P. Stinis, Physics-informed machine learning of redox flow battery based on a two-dimensional unit cell model, Journal of Power Sources 584 (2023) 233548. [28] J. I. D´ ıaz, D. G´ omez-Castro, A. M. Ramos, On the well-posedness of a multiscale mathemat- ical model for lithium-ion batteries, Advances in Nonlinear Analysis 8 (1) (2018) 1132–1157. [29] L. N. Trefethen, J. Weideman, The exponentially convergent trapezoidal rule, SIAM review 56 (3) (2014) 385–458. [30] G. H. Golub, J. H. Welsch, Calculation of gauss quadrature rules, Mathematics of compu- tation 23 (106) (1969) 221–230. [31] I. M. Sobol’, On the distribution of points in a cube and the approximate evaluation of integrals, Zhurnal Vychislitel’noi Matematiki i Matematicheskoi Fiziki 7 (4) (1967) 784–802. [32] A. Krishnapriyan, A. Gholami, S. Zhe, R. Kirby, M. W. Mahoney, Characterizing possible failure modes in physics-informed neural networks, Advances in neural information process- ing systems 34 (2021) 26548–26560. [33] J. C. Wong, C. C. Ooi, A. Gupta, Y.-S. Ong, Learning in sinusoidal spaces with physics- informed neural networks, IEEE Transactions on Artificial Intelligence 5 (3) (2022) 985–1000. [34] L. Lu, R. Pestourie, W. Yao, Z. Wang, F. Verdugo, S. G. Johnson, Physics-informed neural networks with hard constraints for inverse design, SIAM Journal on Scientific Computing 43 (6) (2021) B1105–B1132. doi:10.1137/21M1397908 . [35] M. Hassanaly, P. J. Weddle, R. N. King, S. De, A. Doostan, C. R. Randall, E. J. Dufek, A. M. Colclasure, K. Smith, Pinn surrogate of li-ion battery models for parameter inference. part i: Implementation and multi-fidelity hierarchies for the single-particle model, arXiv preprint arXiv:2312.17329 (2023). [36] S. Wang, Y. Teng, P. Perdikaris, Understanding and mitigating gradient flow pathologies in physics-informed neural networks, SIAM Journal on Scientific Computing 43 (5) (2021) A3055–A3081. 25[37] D. P. Kingma, J. Ba, Adam: A method for stochastic optimization, arXiv preprint arXiv:1412.6980 (2014). [38] D. C. Liu, J. Nocedal, On the limited memory bfgs method for large scale optimization, Mathematical programming 45 (1) (1989) 503–528. [39] DeepMind, I. Babuschkin, K. Baumli, A. Bell, S. Bhupatiraju, J. Bruce, P. Buchlovsky, D. Budden, T. Cai, A. Clark, I. Danihelka, A. Dedieu, C. Fantacci, J. Godwin, C. Jones, R. Hemsley, T. Hennigan, M. Hessel, S. Hou, S. Kapturowski, T. Keck, I. Kemaev, M. King, M. Kunesch, L. Martens, H. Merzic, V. Mikulik, T. Norman, G. Papamakarios, J. Quan, R. Ring, F. Ruiz, A. Sanchez, L. Sartran, R. Schneider, E. Sezener, S. Spencer, S. Srinivasan, M. Stanojevi´ c, W. Stokowiec, L. Wang, G. Zhou, F. Viola, The DeepMind JAX Ecosystem (2020). URL http://github.com/google-deepmind [40] M. Blondel, Q. Berthet, M. Cuturi, R. Frostig, S. Hoyer, F. Llinares-L´ opez, F. Pedregosa, J.-P. Vert, Efficient and modular implicit differentiation, arXiv preprint arXiv:2105.15183 (2021). [41] V. Sitzmann, J. Martel, A. Bergman, D. Lindell, G. Wetzstein, Implicit neural representa- tions with periodic activation functions, Advances in neural information processing systems 33 (2020) 7462–7473. [42] J. Bradbury, R. Frostig, P. Hawkins, M. J. Johnson, C. Leary, D. Maclaurin, G. Necula, A. Paszke, J. VanderPlas, S. Wanderman-Milne, Q. Zhang, JAX: composable transforma- tions of Python+NumPy programs (2018). URL http://github.com/google/jax [43] S. Danisch, J. Krumbiegel, Makie.jl: Flexible high-performance data visualization for Julia, Journal of Open Source Software 6 (65) (2021) 3349. doi:10.21105/joss.03349 . URL https://doi.org/10.21105/joss.03349 [44] J. Kang, Y. Jia, G. Zhu, J. V. Wang, B. Huang, Y. Fan, How electrode thicknesses influence performance of cylindrical lithium-ion batteries, Journal of Energy Storage 46 (2022) 103827. 26